<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/12/05/spring%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/12/05/spring%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="一-框架的概述"><a href="#一-框架的概述" class="headerlink" title="一.框架的概述"></a>一.框架的概述</h1><h3 id="1-1什么是框架"><a href="#1-1什么是框架" class="headerlink" title="1.1什么是框架"></a>1.1什么是框架</h3><blockquote><p>框架是一种高度抽取重复代码的设计,形成某个领域的行业解决方案,具有高可用性高重用性,框架其实就是一个半成品软件</p><p>框架帮我们完成大部分的通用代码编写,我们只需站在”巨人的肩膀上”编写业务代码即可,大大提高了我们的开发效率</p><p>比如 spring(降低企业级开发的复杂度)  springMVC&#x2F;struts2(封装servlet-web应用)  mybatis&#x2F;hibernate(orm框架 封装JDBC–数据访问)</p></blockquote><h3 id="1-2框架的优点"><a href="#1-2框架的优点" class="headerlink" title="1.2框架的优点"></a>1.2框架的优点</h3><blockquote><ol><li><p>不用再考虑公共问题</p></li><li><p>专心在业务实现上</p></li><li><p>结构统一，易于学习、维护</p></li><li><p>新手也可写出好程序</p></li><li><p>不要重复造轮子（Stop Trying to Reinvent the Wheel），已经成为开发人员的基本原则。</p></li></ol></blockquote><p>​</p><h1 id="二-spring框架的入门"><a href="#二-spring框架的入门" class="headerlink" title="二.spring框架的入门"></a>二.spring框架的入门</h1><h4 id="2-1spring的概述"><a href="#2-1spring的概述" class="headerlink" title="2.1spring的概述"></a>2.1spring的概述</h4><blockquote><p>spring是一个非侵入性的轻量级框架,说spring是轻量级并不是指spring的jar包和其依赖(源码)是少量的,反而spring是一个庞然大物,包罗万象,而是指spring是非侵入性的</p><p> Spring 是一个开源框架，是为了解决企业应用程序开发复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许您选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。 </p></blockquote><p>创始人:Rod Johnson(罗德.约翰逊)</p><p> <img src="/images/p01_01.png" alt="img"> </p><h4 id="2-2spring的发展历程"><a href="#2-2spring的发展历程" class="headerlink" title="2.2spring的发展历程"></a>2.2spring的发展历程</h4><ul><li>2004 年 03 月，1.0 版发布。</li><li>2006 年 10 月，2.0 版发布。</li><li>2007 年 11 月，更名为 SpringSource，同时发布了 Spring 2.5。</li><li>2009 年 12 月，Spring 3.0 发布。</li><li>2013 年 12 月，Pivotal 宣布发布 Spring 框架 4.0。</li><li>2017 年 09 月，Spring 5.0 发布。</li></ul><h4 id="2-3spring的非侵入性"><a href="#2-3spring的非侵入性" class="headerlink" title="2.3spring的非侵入性"></a>2.3spring的非侵入性</h4><p> 非侵入式则不需要业务代码引入框架代码的信息，即无需继承框架提供的类，从编写者的角度来看，察觉不到框架的存在。 </p><p> 那么非侵入式的技术体现，即允许在应用系统中自由选择和组装Spring框架的各个功能模块，并且不强制要求应用系统的类必须继承或实现Spring框架的类和接口来达到使用框架的目的。 </p><h4 id="2-4spring框架的好处"><a href="#2-4spring框架的好处" class="headerlink" title="2.4spring框架的好处"></a>2.4spring框架的好处</h4><blockquote><p>1、非侵入式设计</p><p>Spring是一种非侵入式(non-invasive)框架，它可以使应用程序代码对框架的依赖最小化。</p><p>2、 方便解耦、简化开发</p><p>Spring就是一个大工厂，可以将所有对象的创建和依赖关系的维护工作都交给Spring容器管理，大大地降低了组件之间的耦合性。</p><p>3、支持AOP</p><p>Spring提供了对AOP的支持，它允许将一些通用任务，如安全、事务、日志等进行集中式处理，从而提高了程序的复用性。</p><p>4、支持声明式事务处理</p><p>只需要通过配置就可以完成对事务的管理，而无需手动编程。</p><p>5、方便程序的测试</p><p>Spring提供了对Junit4的支持，可以通过注解方便的测试Spring程序。</p><p>6、方便集成各种优秀框架</p><p>Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架(如：Struts、Hibernate、MyBatis、Quartz等)的直接支持。</p><p>7、降低Java EE API的使用难度</p><p>Spring对Java EE开发中非常难用的一些API(如：JDBC、JavaMail等)，都提供了封装，使这些API应用难度大大降低。</p></blockquote><h4 id="2-5spring的体系结构"><a href="#2-5spring的体系结构" class="headerlink" title="2.5spring的体系结构"></a>2.5spring的体系结构</h4><p>  Spring是一个分层框架，由七个定义良好的模块组成。Spring模块构建在核心容器之上，核心容器定义了创建，配置，管理bean的方式。 <img src="/images/p01_02.png" alt="img"> </p><h5 id="2-5-1-核心容器BeanFactory"><a href="#2-5-1-核心容器BeanFactory" class="headerlink" title="2.5.1 核心容器BeanFactory"></a>2.5.1 核心容器BeanFactory</h5><blockquote><p>核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory ，它是工厂模式的实现。BeanFactory 使用控制反转 (IOC) 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开 ( 工厂方法 ) 。 </p><p>BeanFactory使spring成为一个容器</p></blockquote><p><img src="/images/1650939404866.png" alt="1650939404866"></p><h5 id="2-5-2-ApplicationContext-上下文"><a href="#2-5-2-ApplicationContext-上下文" class="headerlink" title="2.5.2 ApplicationContext 上下文"></a>2.5.2 ApplicationContext 上下文</h5><p> Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。 Spring 上下文包括企业服务，例如JNDI 、 EJB 、电子邮件、国际化、校验和调度功能。 </p><blockquote><p>applicationContxt.xml:spring核心配置文件–&gt;上下文(BeanFactory的外在体现)</p><p>ApplicationContext 使spring成为一个框架</p></blockquote><h5 id="2-5-3spring-AOP"><a href="#2-5-3spring-AOP" class="headerlink" title="2.5.3spring AOP"></a>2.5.3spring AOP</h5><p> 通过配置管理特性， Spring AOP 模块直接将面向方面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持 AOP 。 Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP ，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。 </p><h5 id="2-5-4-Spring-DAO"><a href="#2-5-4-Spring-DAO" class="headerlink" title="2.5.4  Spring DAO"></a>2.5.4  Spring DAO</h5><p> JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。 Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构 </p><h5 id="2-5-5-spring-ORM"><a href="#2-5-5-spring-ORM" class="headerlink" title="2.5.5 spring ORM"></a>2.5.5 spring ORM</h5><p> Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO 、 Hibernate 和 iBatis SQL Map 。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。 </p><h5 id="2-5-6-Spring-Web模块"><a href="#2-5-6-Spring-Web模块" class="headerlink" title="2.5.6 Spring Web模块"></a>2.5.6 <strong>Spring Web模块</strong></h5><p> Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以， Spring 框架支持与 Jakarta Struts 的集成。 Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。 </p><h5 id="2-5-7-Spring-MVC框架"><a href="#2-5-7-Spring-MVC框架" class="headerlink" title="2.5.7 Spring MVC框架"></a>2.5.7 <strong>Spring MVC框架</strong></h5><p> MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口， MVC 框架变成为高度可配置的， MVC 容纳了大量视图技术，其中包括 JSP 、 Velocity 、 Tiles 、 iText 和 POI 。 </p><h4 id="2-6spring的两大核心"><a href="#2-6spring的两大核心" class="headerlink" title="2.6spring的两大核心"></a>2.6spring的两大核心</h4><h5 id="2-6-1DI-x2F-IOC依赖注入-x2F-控制反转"><a href="#2-6-1DI-x2F-IOC依赖注入-x2F-控制反转" class="headerlink" title="2.6.1DI&#x2F;IOC依赖注入&#x2F;控制反转"></a>2.6.1DI&#x2F;IOC依赖注入&#x2F;控制反转</h5><blockquote><p>依赖注入:将依赖对象的创建和赋值(装配)由程序内部交给了外部容器,并将创建的依赖对象注入程序内部,达到完全解耦的目的</p><p>是指工程中需要的组件无须自己创建，而是依赖于外部环境注入。</p><p>好莱坞原则:你不要问我,我会自己给你</p></blockquote><p><img src="/images/1650942282502.png" alt="1650942282502"></p><h5 id="2-6-2-AOP面向切面编程"><a href="#2-6-2-AOP面向切面编程" class="headerlink" title="2.6.2 AOP面向切面编程"></a>2.6.2 AOP面向切面编程</h5><blockquote><p>springAOP是spring DI的补充</p><p>概述:简单的说它就是把我们程序重复的代码抽取出来，在需要执行的时候，使用动态代理的技术，在不修改源码的基础上，对我们的已有方法进行增强,比如 日志管理,事务管理,权限管理等</p><p>原理:代理模式</p></blockquote><p><img src="/images/1650943462398.png" alt="1650943462398"></p><h4 id="2-7spring官网和相关资料下载"><a href="#2-7spring官网和相关资料下载" class="headerlink" title="2.7spring官网和相关资料下载"></a>2.7spring官网和相关资料下载</h4><p>官网网址:<a href="https://spring.io/projects/spring-framework">https://spring.io/projects/spring-framework</a></p><p>spring以前版本的下载和相关资料下载:<a href="https://repo.spring.io/ui/native/libs-release-local/org/springframework/spring/">https://repo.spring.io/ui/native/libs-release-local/org/springframework/spring/</a></p><h1 id="三-spring框架的搭建"><a href="#三-spring框架的搭建" class="headerlink" title="三.spring框架的搭建"></a>三.spring框架的搭建</h1><h4 id="3-1基础环境搭建的步骤"><a href="#3-1基础环境搭建的步骤" class="headerlink" title="3.1基础环境搭建的步骤"></a>3.1基础环境搭建的步骤</h4><h5 id="3-1-1基础环境"><a href="#3-1-1基础环境" class="headerlink" title="3.1.1基础环境"></a>3.1.1基础环境</h5><ul><li><p>1创建SE项目–&gt;maven</p></li><li><p>2导入spring基础依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- spring 版本号 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入spring基础依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 此依赖会关联引用Spring中的所有基础jar包 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>3在resources目录下新建一个spring核心配置文件 applicationContxt.xml</p><ul><li><p>xml的基本语法:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Student</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">password</span>&gt;</span>123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注意:在配置框架的xml文件时一般需要通过schema约定标签的命名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring的核心配置文件,是BeanFactory的外在体现,可以在配置文件中配置你想管理进spring容器的bean--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      bean标签:配置bean的(由spring装配的对象)</span></span><br><span class="line"><span class="comment">       class:对象的类(全类名/全限定名)</span></span><br><span class="line"><span class="comment">       id:bean在容器中的唯一标识不能重复,当程序中想获取bean时是可以通过id获取的</span></span><br><span class="line"><span class="comment">       UserDaoImpl userDao=new UserDaoImpl();</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>4在xml中管理bean,并测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ①获取spring容器,加载applicationContext.xml文件并解析</span></span><br><span class="line">BeanFactory factory= <span class="keyword">new</span>   <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">//②通过getBean方法获取容器中的对象</span></span><br><span class="line">IUserDao userDao=(UserDaoImpl)factory.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">userDao.queryUser();</span><br></pre></td></tr></table></figure></li></ul><h5 id="3-1-2有无spring的区别–依赖注入"><a href="#3-1-2有无spring的区别–依赖注入" class="headerlink" title="3.1.2有无spring的区别–依赖注入"></a>3.1.2有无spring的区别–依赖注入</h5><p><strong>dao:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoImpl</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl()--&gt;无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryUser</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------queryUser()----------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(IUserDao userDao)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl(IUserDao userDao)--有参构造方法&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.userDao=userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(IUserDao userDao)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setUserDao(IUserDao userDao)&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.userDao=userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl()--无参构造方法&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.queryUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>applicationContext.xml:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--UserDaoImpl userDao=new UserDaoImpl();--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--IUserService userService=new UserServiceImpl(userDao);--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--userService.findUser();--&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--使用无参构造方法初始化bean--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--使用有参的构造方法初始化bean</span></span><br><span class="line"><span class="comment">     构造方法注入</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;bean id=&quot;userService&quot; class=&quot;com.wudagai.springtest.service.UserServiceImpl&quot;&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;constructor-arg ref=&quot;userDao&quot;&gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--set方法注入</span></span><br><span class="line"><span class="comment">        UserServiceImpl userService=new UserServiceImpl();</span></span><br><span class="line"><span class="comment">       userService.setUserDao(userDao);</span></span><br><span class="line"><span class="comment">       userService.findUser();</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>test:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestYesSpring</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    BeanFactory factory= <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    IUserService userService=(UserServiceImpl)factory.getBean(<span class="string">&quot;userService1&quot;</span>);</span><br><span class="line">    userService.findUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-spring中bean的基本原理"><a href="#四-spring中bean的基本原理" class="headerlink" title="四.spring中bean的基本原理"></a>四.spring中bean的基本原理</h1><h3 id="4-1spring实例化bean的过程-反射是框架的灵魂"><a href="#4-1spring实例化bean的过程-反射是框架的灵魂" class="headerlink" title="4.1spring实例化bean的过程(反射是框架的灵魂)"></a>4.1spring实例化bean的过程(反射是框架的灵魂)</h3><p><img src="/images/1650959820267.png" alt="1650959820267"></p><h3 id="4-2获取spring容器的三种方式"><a href="#4-2获取spring容器的三种方式" class="headerlink" title="4.2获取spring容器的三种方式"></a>4.2获取spring容器的三种方式</h3><blockquote><p>–ClassPathXmlApplicationContext:通过获取类路径下的xml加载spring容器</p><p>–FileSystemXmlApplicationContext:通过文件系统路径下的xml加载spring容器</p><p>–XmlWebApplicationContext:web环境下加载spring容器</p></blockquote><p>①在pom.xml中做以下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--servlet-api相关--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--spring核心依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--springweb相关--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②在web.xml中做以下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--tonmat启动时会加载并解析web.xml文件(是一个可以被事件监听的行为)--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--监听器Listener:</span></span><br><span class="line"><span class="comment">       事件:可以被监听的行为 比如:点击,鼠标移入移除,tomcat启动</span></span><br><span class="line"><span class="comment">       事件源:发生事件的地方 比如:按钮,tomcat</span></span><br><span class="line"><span class="comment">       监听器:发生的行为 比如 弹出模态框 加载web.xml</span></span><br><span class="line"><span class="comment">         注册监听:将事件 事件源和监听器绑定在一起就是注册监听</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册监听:ContextLoaderListener tomcat启动时就执行该监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③在servlet中测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">   BeanFactory factory= WebApplicationContextUtils.getRequiredWebApplicationContext(request.getServletContext());</span><br><span class="line">    IUserService userService=(UserServiceImpl)factory.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">    userService.findUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3spring容器的两种类型"><a href="#4-3spring容器的两种类型" class="headerlink" title="4.3spring容器的两种类型"></a>4.3spring容器的两种类型</h3><h4 id="4-3-1ApplicationContext"><a href="#4-3-1ApplicationContext" class="headerlink" title="4.3.1ApplicationContext"></a>4.3.1ApplicationContext</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *ApplicationContext:</span></span><br><span class="line"><span class="comment">         *ApplicationContext在自身被实例化时一次完成所有Bean的创建。大多数时候使用</span></span><br><span class="line"><span class="comment">         * 解释:</span></span><br><span class="line"><span class="comment">         *     积极加载:在加载spring核心配置文件时(创建spring容器)就将所有的bean完成了创建工作</span></span><br><span class="line"><span class="comment">         *     优点:</span></span><br><span class="line"><span class="comment">         *         可以在加载xml文件的时候完成对xml正确性的校验</span></span><br><span class="line"><span class="comment">         *     缺点:</span></span><br><span class="line"><span class="comment">         *         占内存大,解析时间长</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 如果你不是对内存斤斤计较的话就使用ApplicationContext</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">ApplicationContext factory=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="4-3-2-BeanFactory"><a href="#4-3-2-BeanFactory" class="headerlink" title="4.3.2 BeanFactory"></a>4.3.2 BeanFactory</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * BeanFactory:</span></span><br><span class="line"><span class="comment">         *     懒加载:在加载spring核心配置文件的时候不会马上完成bean实例的创建而是在getBean()方法被  调用时创建实例</span></span><br><span class="line"><span class="comment">         *     优点:</span></span><br><span class="line"><span class="comment">         *        占内存小,解析时间短</span></span><br><span class="line"><span class="comment">         *     缺点:</span></span><br><span class="line"><span class="comment">         *        不能在加载xml文件时完成对xml正确性的校验</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">BeanFactory factory=<span class="keyword">new</span> <span class="title class_">XmlBeanFactory</span>(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;applicationContext.xml&quot;</span>));</span><br><span class="line">factory.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">factory.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-4spring中bean的生命周期"><a href="#4-4spring中bean的生命周期" class="headerlink" title="4.4spring中bean的生命周期"></a>4.4spring中bean的生命周期</h3><blockquote><p>bean的生命周期现在是由程序内部交个了外部容器</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   bean的生命周期:构造器-&gt;初始化方法(统一的初始化配置)-&gt;提供服务-&gt;销毁方法(释放资源)</span></span><br><span class="line"><span class="comment">   init-method:指定初始化方法</span></span><br><span class="line"><span class="comment">   destroy-method:指定销毁方法,在spring容器正常关闭之前执行</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;bean id=&quot;student&quot; class=&quot;com.wudagai.springtest.entity.Student&quot; init-method=&quot;init&quot; destroy-method=&quot;destory&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/181453414212066.png" alt="img"> </p><p> <img src="/images/181454040628981.png" alt="img"> </p><h3 id="4-5spring实例化bean的三种方式"><a href="#4-5spring实例化bean的三种方式" class="headerlink" title="4.5spring实例化bean的三种方式"></a>4.5spring实例化bean的三种方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--构造方法</span></span><br><span class="line"><span class="comment">       UserDaoImpl userDao=new UserDaoImpl()</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id=&quot;userDao&quot; class=&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--静态工厂方法:工厂中的方法都是静态方法</span></span><br><span class="line"><span class="comment">        UserDaoImpl userDao=DaoFactory.getUserDao()</span></span><br><span class="line"><span class="comment">        class:指定工厂类</span></span><br><span class="line"><span class="comment">        factory-method:工厂方法</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id=&quot;userDao&quot; class=&quot;com.wudagai.springtest.factory.DaoFactory&quot; factory-  method=&quot;getUserDao&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--实例工厂方法:工厂中的方法都是实例方法</span></span><br><span class="line"><span class="comment">      DaoFactoryInstace factory=new DaoFactoryInstace();</span></span><br><span class="line"><span class="comment">      UserDaoImpl userDao=factory.getUserDao();</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;daoFactoryInstace&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.factory.DaoFactoryInstace&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     factory-bean:工厂实例</span></span><br><span class="line"><span class="comment">     class:对象的类</span></span><br><span class="line"><span class="comment">     factory-method:工厂方法</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">factory-bean</span>=<span class="string">&quot;daoFactoryInstace&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-6spring中bean的作用域"><a href="#4-6spring中bean的作用域" class="headerlink" title="4.6spring中bean的作用域"></a>4.6spring中bean的作用域</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     SE环境:</span></span><br><span class="line"><span class="comment">     spring中bean的作用域</span></span><br><span class="line"><span class="comment">     singleton(默认的):单例,每一个bean在spring中只用一个实例,通过getBean()方法获取到指定的bean都是同一个对象</span></span><br><span class="line"><span class="comment">                       在spring容器创建时就创建所有的bean</span></span><br><span class="line"><span class="comment">     prototype:原型,在spring容器创建时不会创建bean,只有通过getBean方法获取实例时才创建bean,每调用一次getBean()方法</span></span><br><span class="line"><span class="comment">                   都会在spring容器中创建新的bean(实例)</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;bean id=&quot;userDao&quot; class=&quot;com.wudagai.springtest.dao.UserDaoImpl&quot; scope=&quot;singleton&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    web环境:</span></span><br><span class="line"><span class="comment">      singleton(默认的):单例,每一个bean在spring中只用一个实例,通过getBean()方法获取到指定的bean都是同一个对象</span></span><br><span class="line"><span class="comment">                       在spring容器创建时就创建所有的bean</span></span><br><span class="line"><span class="comment">      prototype:原型,在spring容器创建时不会创建bean,只有通过getBean方法获取实例时才创建bean,每调用一次getBean()方法</span></span><br><span class="line"><span class="comment">                   都会在spring容器中创建新的bean(实例)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      需要在web.xml中配置requestContextListener,下面三个作用域才能生效</span></span><br><span class="line"><span class="comment">     &lt;listener&gt;</span></span><br><span class="line"><span class="comment">        &lt;listener-class&gt;org.springframework.web.context.request.RequestContextListener&lt;/listener-class&gt;</span></span><br><span class="line"><span class="comment">    &lt;/listener&gt;</span></span><br><span class="line"><span class="comment">      request:同一个请求共享同一个bean实例,不同请求是不同的实例</span></span><br><span class="line"><span class="comment">      session:同一个会话不同请求共享同一个bean实例</span></span><br><span class="line"><span class="comment">      globalsession:同一个会话不同请求共享同一个bean实例</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/1651029504497.png" alt="1651029504497"></p><h3 id="4-7spring中设置懒加载方式"><a href="#4-7spring中设置懒加载方式" class="headerlink" title="4.7spring中设置懒加载方式"></a>4.7spring中设置懒加载方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   default-lazy-init=&quot;true&quot; 全局加载方式 true:懒加载  fasle(默认):积极加载</span></span><br><span class="line"><span class="comment">   lazy-init=&quot;true&quot; 单个bean的加载方式 true:懒加载  fasle:积极加载  默认跟default-lazy-init保持一致</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.BookDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="五-依赖注入"><a href="#五-依赖注入" class="headerlink" title="五.依赖注入"></a>五.依赖注入</h1><h3 id="5-1依赖注入的三种方式"><a href="#5-1依赖注入的三种方式" class="headerlink" title="5.1依赖注入的三种方式"></a>5.1依赖注入的三种方式</h3><p><strong>pojo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="keyword">private</span> Integer stuAge;</span><br><span class="line">    <span class="keyword">private</span> Double grade;</span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String stuName, Integer stuAge)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuName = stuName;</span><br><span class="line">        <span class="built_in">this</span>.stuAge = stuAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String stuName, Integer stuAge, Double grade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuName = stuName;</span><br><span class="line">        <span class="built_in">this</span>.stuAge = stuAge;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStuName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stuName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStuName</span><span class="params">(String stuName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuName = stuName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getStuAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stuAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStuAge</span><span class="params">(Integer stuAge)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuAge = stuAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getGrade</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGrade</span><span class="params">(Double grade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IUserDao <span class="title function_">getUserDao</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(IUserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;stuName=&#x27;&quot;</span> + stuName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, stuAge=&quot;</span> + stuAge +</span><br><span class="line">                <span class="string">&quot;, grade=&quot;</span> + grade +</span><br><span class="line">                <span class="string">&quot;, userDao=&quot;</span> + userDao +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>applicationContxt.xml</strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖注入的三种方式</span></span><br><span class="line"><span class="comment">    构造方法注入</span></span><br><span class="line"><span class="comment">    属性注入(设值注入)</span></span><br><span class="line"><span class="comment">    接口注入:侵入性强</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ========================================构造方法注入=======================================--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Student student=new Student(&quot;zhangsan&quot;,20,90.0);</span></span><br><span class="line"><span class="comment">     public Student(String stuName, Integer stuAge, Double grade)</span></span><br><span class="line"><span class="comment">   &lt;constructor-arg&gt;构造方法的参数</span></span><br><span class="line"><span class="comment">    必要属性: ref 或 value</span></span><br><span class="line"><span class="comment">      ref:参数的类型是一个pojo</span></span><br><span class="line"><span class="comment">      value:简单的类型  String和包装类型</span></span><br><span class="line"><span class="comment">    非必要属性:</span></span><br><span class="line"><span class="comment">        index:参数的索引,索引从0开始</span></span><br><span class="line"><span class="comment">        name:指定构造方法中的参数名</span></span><br><span class="line"><span class="comment">        type:指定参数转换的类型</span></span><br><span class="line"><span class="comment">    注意:依赖注入简单类型配置的时候都是String类型,</span></span><br><span class="line"><span class="comment">         但是spring中有许多类型转换组件,会将String类型转为参数对应的类型再进行赋值</span></span><br><span class="line"><span class="comment">         所以建议所有的成员变量都用包装类进行声明</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;bean id=&quot;student&quot; class=&quot;com.wudagai.springtest.pojo.Student&quot;&gt;--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;constructor-arg value=&quot;zhangsan&quot;&gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;constructor-arg value=&quot;40&quot;&gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;constructor-arg value=&quot;90.0&quot;&gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--&lt;bean id=&quot;student&quot; class=&quot;com.wudagai.springtest.pojo.Student&quot;&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;constructor-arg index=&quot;1&quot; value=&quot;20&quot; &gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;constructor-arg index=&quot;0&quot; value=&quot;lisi&quot;&gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;constructor-arg index=&quot;2&quot; value=&quot;80.0&quot; &gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.pojo.Student&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;stuAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.Integer&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;lisi&quot;</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;grade&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;81.0&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- ========================================set方法注入 =======================================--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;property &gt;:设置属性</span></span><br><span class="line"><span class="comment">        必要属性: ref 或 value  name</span></span><br><span class="line"><span class="comment">         ref:参数的类型是一个pojo</span></span><br><span class="line"><span class="comment">         value:简单的类型  String和包装类型</span></span><br><span class="line"><span class="comment">         name:属性名-&gt;set/get方法去掉get/set剩下的英文单词首字母小写 比如setUserDao-&gt;userDao    setUserName-&gt;userName</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wangwu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2依赖注入的类型"><a href="#5-2依赖注入的类型" class="headerlink" title="5.2依赖注入的类型"></a>5.2依赖注入的类型</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu8&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--简单类型--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--pojo类型--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;property name=&quot;minStudent&quot; ref=&quot;min&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minStudent&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.pojo.MinStudent&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--list集合--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stringList&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>lisi<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minStudentList&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;min&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.pojo.MinStudent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--set集合--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--private Set&lt;String&gt; stringSet;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stringSet&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>lisi<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--private Set&lt;MinStudent&gt; minStudentSet;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minStudentSet&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;min&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.pojo.MinStudent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--map集合--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--private Map&lt;Integer,String&gt; integerStringMap;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;integerStringMap&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lisi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--private Map&lt;Integer,MinStudent&gt; integerMinStudentMap;--&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--&lt;entry key=&quot;3&quot;&gt;--&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--&lt;bean class=&quot;xxxxx&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--&lt;/entry&gt;--&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--properties类型--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--private Properties properties;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>jdbc://mysql:localhost:3306:test<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>com.mysql.jdbc.Driver&gt;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-3spring注解配置"><a href="#5-3spring注解配置" class="headerlink" title="5.3spring注解配置"></a>5.3spring注解配置</h3><ul><li><p><strong>spring的配置方式一共有三种</strong></p><blockquote><p>第一种(spring1.x版本):xml配置方式</p><p>场景:任何bean都可以使用xml配置,简单来说就是自定义业务场景的bean和基础配置还有第三方依赖的bean都可以通过xml配置后交由spring管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--将UserDao管理进spring容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--将UserService进spring容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种(spring2.x版本):注解方式</p><p>  疑问:是用xml配置还是用注解配置?</p><p>  场景: </p><p>​            自定义业务场景的bean和基础配置是用注解方式</p><p>​           第三方依赖的bean是用xml配置</p><p>第三种方式(spring3.x版本):javaConfig方式(java配置方式)</p><p>后面再学习</p></blockquote></li><li><p><strong>spring注解配置</strong></p><ul><li>依赖于AOP,导入aop的依赖</li></ul><blockquote><p>①需要在applicationContext.xml中开启注解装配</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--=========================注解方式配置依赖注入=======================--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解装配--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将UserDao管理进spring容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将UserService进spring容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.service.UserServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②然后在需要注入的字段上使用注解@Resource(name&#x3D;”userDao”)或者@Autowired</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="comment">//@Autowired    </span></span><br><span class="line">    <span class="meta">@Resource(name=&quot;userDao&quot;)</span>    </span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>@Autowired</strong>   </p><blockquote><p>按照类型找：根据字段类型匹配spring容器中bean的类型，如果匹配上了，spring自动将bean注入字段中</p><p>注意：</p><p>​①如果通过字段的类型找到多个bean，就会按照字段名配置bean的id,如果匹配上了，spring自动将bean注入字段中,所以一般一个接口对应一个实现类即可</p><p>​    ②如果找不到bean就会报错，required &#x3D; false属性配置该字段是否必须注入，false:不必须，true:必须，默认为false</p><p>​     ③可以通过@Qualifier(name)与bean的id匹配直接匹配</p></blockquote></li><li><p><strong>@Resource</strong></p><blockquote><p>@Resource：作用跟@Autowired一样</p><p>@Resource(name&#x3D;”xx”)  作用跟@Qualifier(name)+@Autowired作用是一样的，根据name匹配bean的id</p></blockquote></li></ul><h3 id="5-4开启组件扫描"><a href="#5-4开启组件扫描" class="headerlink" title="5.4开启组件扫描"></a>5.4开启组件扫描</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    base-package:指定扫描的路径（包名），多个包中间用“，”分隔</span></span><br><span class="line"><span class="comment">    作用:将指定包中所有被@Component注解修饰的组件管理进spring容器,bean的id默认为类名首字母小写</span></span><br><span class="line"><span class="comment">        @Component(value)中的value可以指定bean的id值</span></span><br><span class="line"><span class="comment">    @Component下有三个子注解,用于开发时语义上的模块拆分</span></span><br><span class="line"><span class="comment">        @Service :service层 业务逻辑</span></span><br><span class="line"><span class="comment">        @Repository:dao层  数据访问层</span></span><br><span class="line"><span class="comment">        @Controller:controller 控制层</span></span><br><span class="line"><span class="comment">        如果某个组件没有层次的归属可以使用@Component注解</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wudagai.springtest.*&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="六-springAOP"><a href="#六-springAOP" class="headerlink" title="六.springAOP"></a>六.springAOP</h1><h3 id="6-1代理模式"><a href="#6-1代理模式" class="headerlink" title="6.1代理模式"></a>6.1代理模式</h3><blockquote><p>代理(Proxy)是一种设计模式,提供了对目标对象另外的访问方式;即通过代理对象访问目标对象.这样做的好处是:<strong>可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能</strong><br> 这里使用到编程中的一个思想:不要随意去修改别人已经写好的代码或者方法,如果需改修改,可以通过代理的方式来扩展该方法，Spring中AOP切面编程就是代理的一个典型例子</p><p>总结：在不改目标对象代码的情况下对其进行增强</p><p> 代理模式的关键点是:<strong>代理对象与目标对象，代理对象是对目标对象的扩展，并会调用目标对象</strong> </p></blockquote><p><img src="/images/1651126169259.png" alt="1651126169259"></p><h4 id="6-1-1代理模式的分类"><a href="#6-1-1代理模式的分类" class="headerlink" title="6.1.1代理模式的分类"></a>6.1.1代理模式的分类</h4><ul><li>静态代理（代理对象在源代码中出现，需要开发人员提供代理对象）<ul><li>代理对象和目标对象的关系<ul><li>父子关系：目标对象是代理对象的父类</li><li>兄弟关系：目标对象和代理对象实现同一个接口（面向接口编程）</li></ul></li></ul></li><li>动态代理（代理对象在程序运行过程中自动创建，不需要开发人员提供，但是需要配置代理模式–反射机制）<ul><li>代理对象和目标对象的关系<ul><li>父子关系：目标对象是代理对象的父类（cglib动态代理）</li><li>兄弟关系：目标对象和代理对象实现同一个接口（面向接口编程）（jdk动态代理）</li></ul></li></ul></li><li>JDK动态代理核心代码:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wudagai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022/4/28 15:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:中间类</span></span><br><span class="line"><span class="comment"> * 由中间类生成代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中间类持有目标类对象的引用,这里会构成一种静态代理关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object object; <span class="comment">//目标对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj;<span class="comment">//增强对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增强对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JavaProxyInvocationHandler</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.obj=obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态生成代理类对象,Proxy.newProxyInstance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回代理类的实例</span></span><br><span class="line"><span class="comment">     * object:指定为哪一个目标对象生成代理对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">newProxyInstance</span><span class="params">(Object object)</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.object=object;</span><br><span class="line">       <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">               <span class="comment">//指定代理对象的类加载器(获取目标对象的类加载器,代理对象由目标对象的类加载器进行加载)</span></span><br><span class="line">               <span class="built_in">this</span>.object.getClass().getClassLoader(),</span><br><span class="line">               <span class="comment">//代理对象需要实现的接口，可以同时指定多个接口(目标对象的接口)</span></span><br><span class="line">               <span class="built_in">this</span>.object.getClass().getInterfaces(),</span><br><span class="line">               <span class="comment">//方法调用的实际处理者，代理对象的方法调用都会转发到这里 保证invoke方法会被执行(代理对象每一次执行方法都会调用this.invoke())</span></span><br><span class="line">               <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 代理对象执行的方法(对象)--封装了方法的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 方法的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 目标对象执行方法返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        TranManager tranManager=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> TranManager)&#123;</span><br><span class="line">            tranManager=(TranManager)obj;</span><br><span class="line">        &#125;</span><br><span class="line">        tranManager.open();</span><br><span class="line">        Object result=method.invoke(object,args);<span class="comment">//告诉目标对象执行核心业务方法</span></span><br><span class="line">        tranManager.close();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-2AOP：全称是-Aspect-Oriented-Programming-即：面向切面编程。"><a href="#6-2AOP：全称是-Aspect-Oriented-Programming-即：面向切面编程。" class="headerlink" title="6.2AOP：全称是 Aspect Oriented Programming 即：面向切面编程。"></a>6.2AOP：全称是 Aspect Oriented Programming 即：面向切面编程。</h3><p>简单的说它就是把我们程序重复的代码抽取出来，在需要执行的时候，使用动态代理的技术，在不修改源码的基础上，对我们的已有方法进行增强。</p><p>即当需要扩展功能时，传统方式采用纵向继承方式实现。但这种方式有很多缺点。 比如：父类方法名称改变时，子类也要修改。给多个方法扩展功能时，子类也需要修改。 因此，spring的AOP，实际上是采用横向抽取机制，取代传统的纵向继承体系。</p><p>实现AOP示意图：</p><ol><li>先将方面代码抽取出来<br><img src="/images/p01_04.png" alt="img"></li><li>运行时将业务代码和方面代码编织在一起<br><img src="/images/p01_05.png" alt="img"></li></ol><p>Spring AOP 可以使用xml文件形式实现，也可以使用注解方式实现。下面只使用注解方式实现Spring AOP。</p><p>动态代理是一种常用的设计模式，广泛应用于框架中，Spring框架的AOP特性就是应用动态代理实现的。</p><p><img src="/images/p01_06.png" alt="img"></p><p>实现动态代理有两种形式：</p><ol><li>jdk动态代理：根据目标类接口获取代理类实现规则，生成代理对象。这个代理对象，也是目标类接口的一个实现类。</li><li>cglib动态代理：根据目标类本身获取代理类实现规则，生成代理对象。这个代理对象，也是目标类的一个子类。 （如果目标类为final，则不能使用CGLib实现动态代理）</li></ol><p>SpringAOP可以自动在jdk动态代理和CGLib动态代理之间进行切换，规则如下：</p><ol><li>如果目标对象实现了接口，采用jdk动态代理实现aop。</li><li>如果目标对象没有实现接口，采用CGLib动态代理实现aop。</li><li>如果目标对象实现了接口，但仍然想要使用CGLIB实现aop，可以手动进行配置。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2022/12/04/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/12/04/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h1><p>hello</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
