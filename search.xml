<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mybatis</title>
      <link href="/2022/12/09/Mybatis/"/>
      <url>/2022/12/09/Mybatis/</url>
      
        <content type="html"><![CDATA[<blockquote><p>开卷了兄弟们，在此特别感谢黑马程序员的JavaWeb教程</p></blockquote><h1 id="框架的概述"><a href="#框架的概述" class="headerlink" title="框架的概述"></a>框架的概述</h1><h2 id="什么是框架"><a href="#什么是框架" class="headerlink" title="什么是框架"></a>什么是框架</h2><p>框架是一种高度抽取重复代码的设计,形成某个领域的行业解决方案,具有高可用性高重用性,框架其实就是一个半成品软件</p><h2 id="为什么要使用框架"><a href="#为什么要使用框架" class="headerlink" title="为什么要使用框架"></a>为什么要使用框架</h2><p>框架帮我们完成大部分的通用代码编写,我们只需站在”巨人的肩膀上”编写业务代码即可,大大提高了我们的开发效率</p><p>比如 spring(降低企业级开发的复杂度)  springMVC&#x2F;struts2(封装servlet-web应用)  mybatis&#x2F;hibernate(orm框架 封装JDBC–数据访问)</p><h2 id="框架的优点"><a href="#框架的优点" class="headerlink" title="框架的优点"></a>框架的优点</h2><ol><li>不用再考虑公共问题</li><li>专心在业务实现上</li><li>结构统一，易于学习、维护</li><li>新手也可写出好程序</li><li>不要重复造轮子（Stop Trying to Reinvent the Wheel），已经成为开发人员的基本原则。</li></ol><h1 id="mybaties简介"><a href="#mybaties简介" class="headerlink" title="mybaties简介"></a>mybaties简介</h1><blockquote><ul><li>Mybaties是一款优秀的<strong>持久层框架</strong>，用于简化JDBC开发</li><li>Mybaties本是Apache的一个开源项目iBaties， 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github</li><li>官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></li></ul></blockquote><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p>负责将数据保存在数据库的那一层代码，javaEE三层架构：表现层、业务层、持久层</p><p>以后我们进行开发时会将操作数据库的Java代码作为持久层，而Mybaties就是对JDBC代码进行了封装的一个框架</p><h2 id="JDBC的缺点"><a href="#JDBC的缺点" class="headerlink" title="JDBC的缺点"></a>JDBC的缺点</h2><ul><li>硬编码<ul><li>注册驱动，获取链接</li><li>SQl语句</li></ul></li><li>操作繁琐<ul><li>手动设置参数</li><li>手动封装结果集</li></ul></li></ul><h3 id="Mybaties的解决方案"><a href="#Mybaties的解决方案" class="headerlink" title="Mybaties的解决方案"></a>Mybaties的解决方案</h3><p>通过配置文件和反射来实现</p><p><img src="/2022/12/09/Mybatis/1670428616033.png"></p><h1 id="Mybaties快速入门"><a href="#Mybaties快速入门" class="headerlink" title="Mybaties快速入门"></a>Mybaties快速入门</h1><p>查询user表中的数据</p><p><img src="/2022/12/09/Mybatis/1670429559229.png"></p><hr><p>1.创建user表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE mybatis;</span><br><span class="line">USE mybatis;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS tb_user;</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="title function_">tb_user</span><span class="params">(</span></span><br><span class="line"><span class="params">id INT PRIMARY KEY AUTO_INCREMENT,</span></span><br><span class="line"><span class="params">username VARCHAR(<span class="number">20</span>)</span>,</span><br><span class="line">PASSWORD <span class="title function_">VARCHAR</span><span class="params">(<span class="number">20</span>)</span>,</span><br><span class="line">gender <span class="title function_">CHAR</span><span class="params">(<span class="number">1</span>)</span>,</span><br><span class="line">addr <span class="title function_">VARCHAR</span><span class="params">(<span class="number">30</span>)</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO tb_user <span class="title function_">VALUES</span> <span class="params">(<span class="number">1</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>)</span>;</span><br><span class="line">INSERT INTO tb_user <span class="title function_">VALUES</span> <span class="params">(<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;234&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;天津&#x27;</span>)</span>;</span><br><span class="line">INSERT INTO tb_user <span class="title function_">VALUES</span> <span class="params">(<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;西安&#x27;</span>)</span>;</span><br></pre></td></tr></table></figure><hr><p>2.创建模块，导入坐标</p><blockquote><p>下面是官方文档的叙述</p><p>要使用 MyBatis， 只需将 mybatis-x.x.x.jar 文件置于类路径（classpath）中即可。</p><p>如果使用 Maven 来构建项目，则需将下面的依赖代码置于 pom.xml 文件中：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  <span class="comment">&lt;!--版本号记得修改--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于涉及到了数据库的相关操作，所以我们也要导入数据库的jar包，同理，我们也可以导入一些所需要jar包，如junit单元测试，写日志的logback等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis 依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mysql 驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit 单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加slf4j日志api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加logback-classic依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加logback-core依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>随后将logback需要的XML配置文件存放在<code>src/main/resource</code>目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        CONSOLE ：表示当前的日志信息是可以输出到控制台的。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%level]  %cyan([%thread]) %boldGreen(%logger&#123;15&#125;) - %msg %n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF</span></span><br><span class="line"><span class="comment">     ， 默认debug</span></span><br><span class="line"><span class="comment">      &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个输出位置将会被本日志级别控制。</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>3.编写Mybaties核心配置文件，替换连接信息，解决硬编码问题</p><blockquote><p>先看看官网怎么说:</p><p>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。</p><p>从 XML 文件中构建 SqlSessionFactory 的实例非常简单，建议使用类路径下的资源文件进行配置。 但也可以使用任意的输入流（InputStream）实例，比如用文件路径字符串或 file:&#x2F;&#x2F; URL 构造的输入流。MyBatis 包含一个名叫 Resources 的工具类，它包含一些实用方法，使得从类路径或其它位置加载资源文件更加容易。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br></pre></td></tr></table></figure><p>XML 配置文件中包含了对 MyBatis 系统的核心设置，包括获取数据库连接实例的数据源（DataSource）以及决定事务作用域和控制方式的事务管理器（TransactionManager）。后面会再探讨 XML 配置文件的详细内容，这里先给出一个简单的示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--数据库的连接信息--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加载SQL映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>我们在<code>src/main/resource</code>下创建一个mybaties-config.xml（也就是编写配置文件），将示例的xml代码复制到我们创建好的xml文件中，并替换数据库连接信息，到此就只剩下编写SQL映射文件了</p><hr><p>4.编写SQL映射文件，统一管理SQL，解决硬编码问题</p><p>继续听听官网怎么说的</p><blockquote><p>探究已映射的 SQL 语句<br>现在你可能很想知道 SqlSession 和 Mapper 到底具体执行了些什么操作，但 SQL 语句映射是个相当广泛的话题，可能会占去文档的大部分篇幅。 但为了让你能够了解个大概，这里先给出几个例子。</p><p>在上面提到的例子中，一个语句既可以通过 XML 定义，也可以通过注解定义。我们先看看 XML 定义语句的方式，事实上 MyBatis 提供的所有特性都可以利用基于 XML 的映射语言来实现，这使得 MyBatis 在过去的数年间得以流行。如果你用过旧版本的 MyBatis，你应该对这个概念比较熟悉。 但相比于之前的版本，新版本改进了许多 XML 的配置，后面我们会提到这些改进。这里给出一个基于 XML 映射语句的示例，它应该可以满足上个示例中 SqlSession 的调用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">     <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">     <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.mybatis.example.BlogMapper&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--id是整个sql语句的唯一标识，resultType是结果的类型--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlog&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">     select * from Blog where id = #&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>继续在<code>src/main/resource</code>目录下UserMapper文件（命名规则：操作对象User+Mapper，根据不同的操作对象，将User换成不同的名称），将示例代码粘贴进去，随后将<code>resultType</code>改成User类的路径，那么查询结果就会自动返回一个User类型，同时在<code>src/main/java</code>目录下，新建<code>cn.glutnn.User类</code>，属性与数据库中的User表相对应。</p><blockquote><p>查询语句改为了查询user表中的所有数据，同时将id改为selectAll用来标识此sql语句，resultType改为我们刚刚创建的User类的路径，namespace我们后面再说<br>然后将第3步的映射文件路径改为我们新创建的UserMapper路径 <code>&lt;mapper resource=&quot;UserMapper.xml&quot;/&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">     <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">     <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;UserMapper&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.blog.pojo.User&quot;</span>&gt;</span></span><br><span class="line">     select * from tb_user;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>5、编码 —&gt; 定义POJO类，加载核心配置文件 —&gt; 获取SqlSessionFactory对象 —&gt; 获取SqlSession对象，执行SQL语句 —&gt; 释放资源</p><ul><li>先看看官网怎么说</li></ul><blockquote><p>从 XML 文件中构建 SqlSessionFactory 的实例非常简单，建议使用类路径下的资源文件进行配置。 但也可以使用任意的输入流（InputStream）实例，比如用文件路径字符串或 file:&#x2F;&#x2F; URL 构造的输入流。MyBatis 包含一个名叫 Resources 的工具类，它包含一些实用方法，使得从类路径或其它位置加载资源文件更加容易。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br></pre></td></tr></table></figure></blockquote><p> 测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.加载核心配置文件，获取SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybaties-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="comment">// 2.通过SqlSessionFactory的openSession()来获取对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 3.执行sql语句，参数为映射文件的namespace.id</span></span><br><span class="line">        List&lt;User&gt; list = sqlSession.selectList(<span class="string">&quot;UserMapper.selectAll&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">// 4.关闭资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="封装持久层"><a href="#封装持久层" class="headerlink" title="封装持久层"></a>封装持久层</h1><p>MyBatis开发DAO层有两种方式：</p><ol><li>原始dao方式</li><li>mapper代理方式</li></ol><h2 id="原始dao方式开发"><a href="#原始dao方式开发" class="headerlink" title="原始dao方式开发"></a>原始dao方式开发</h2><p>按照JDBC课程中封装dao层的方式，我们可以先封装一个 Util 工具类，在此工具类中封装一个获取SqlSessionFactory的方法。然后创建dao接口和实现类。</p><p>SqlSessionFactory工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neusoft.util;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Util</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getSqlSessionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(sqlSessionFactory==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis/SqlMapConfig.xml&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> Resources.getResourceAsReader(resource);</span><br><span class="line">                sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dao接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neusoft.dao;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> com.neusoft.po.Emp;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Emp <span class="title function_">getEmpById</span><span class="params">(<span class="type">int</span> empno)</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dao实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neusoft.dao.impl;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> com.neusoft.dao.EmpDao;</span><br><span class="line"><span class="keyword">import</span> com.neusoft.po.Emp;</span><br><span class="line"><span class="keyword">import</span> com.neusoft.util.Util;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Emp <span class="title function_">getEmpById</span><span class="params">(<span class="type">int</span> empno)</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> Util.getSqlSessionFactory().openSession();</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;emp.getEmpById&quot;</span>,empno);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> emp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> Util.getSqlSessionFactory().openSession();</span><br><span class="line">        List&lt;Emp&gt; list = sqlSession.selectList(<span class="string">&quot;emp.listEmp&quot;</span>);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">EmpDao</span> <span class="variable">dao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpDaoImpl</span>();</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> dao.getEmpById(<span class="number">7369</span>);</span><br><span class="line">System.out.println(emp);</span><br><span class="line">List&lt;Emp&gt; list = dao.listEmp();</span><br><span class="line"><span class="keyword">for</span>(Emp emp : list) &#123;</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以发现，原始dao开发所存在的问题：</p><ol><li>dao实现类中存在大量重复代码</li><li>调用sqlSession方法时，将statement的id硬编码了</li><li>调用sqlSession方法时传入的参数，由于sqlSession使用了泛型，所以即使传入参数的数据类型错误，在编译阶段也不会报错。</li></ol><h2 id="Mapper代理开发"><a href="#Mapper代理开发" class="headerlink" title="Mapper代理开发"></a>Mapper代理开发</h2><h3 id="mapper开发代理概述"><a href="#mapper开发代理概述" class="headerlink" title="mapper开发代理概述"></a>mapper开发代理概述</h3><p>之前我们写的代码是基本使用方式，它也存在硬编码的问题，这里调用 <code>selectList()</code> 方法传递的参数是映射配置文件中的 namespace.id值。如果参数写错了，程序就无法执行，而参数的内容也没有IDE的自动补全功能，也不利于后期的维护</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; users = sqlSession.selectList(<span class="string">&quot;UserMapper.selectAll&quot;</span>);</span><br><span class="line">System.out.println(users);</span><br></pre></td></tr></table></figure><p>如果使用 Mapper 代理方式则不存在硬编码问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; users = userMapper.selectAll();</span><br></pre></td></tr></table></figure><p>通过上面的描述可以看出 Mapper 代理方式的目的：</p><ul><li>解决原生方式中的硬编码</li><li>简化后期执行SQL</li></ul><p>Mybatis 官网也是推荐使用 Mapper 代理的方式。</p><blockquote><p>为了这个简单的例子，我们似乎写了不少配置，但其实并不多。在一个 XML 映射文件中，可以定义无数个映射语句，这样一来，XML 头部和文档类型声明部分就显得微不足道了。文档的其它部分很直白，容易理解。 它在命名空间 “org.mybatis.example.BlogMapper” 中定义了一个名为 “selectBlog” 的映射语句，这样你就可以用全限定名 “org.mybatis.example.BlogMapper.selectBlog” 来调用映射语句了，就像上面例子中那样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Blog</span> <span class="variable">blog</span> <span class="operator">=</span> (Blog) session.selectOne(<span class="string">&quot;org.mybatis.example.BlogMapper.selectBlog&quot;</span>, <span class="number">101</span>);</span><br></pre></td></tr></table></figure><p>你可能会注意到，这种方式和用全限定名调用 Java 对象的方法类似。这样，该命名就可以直接映射到在命名空间中同名的映射器类，并将已映射的 select 语句匹配到对应名称、参数和返回类型的方法。因此你就可以像上面那样，不费吹灰之力地在对应的映射器接口调用方法，就像下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="type">BlogMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(BlogMapper.class);</span><br><span class="line"><span class="type">Blog</span> <span class="variable">blog</span> <span class="operator">=</span> mapper.selectBlog(<span class="number">101</span>);</span><br></pre></td></tr></table></figure><p>第二种方法有很多优势，首先它不依赖于字符串字面值，会更安全一点；其次，如果你的 IDE 有代码补全功能，那么代码补全可以帮你快速选择到映射好的 SQL 语句。</p></blockquote><h3 id="使用Mapper代理要求"><a href="#使用Mapper代理要求" class="headerlink" title="使用Mapper代理要求"></a>使用Mapper代理要求</h3><p>使用Mapper代理方式，必须满足以下要求：</p><ol><li>映射文件中的 namespace 必须是 mapper 接口的地址。</li><li>映射文件中 statement 的 id 必须与 mapper 接口中的方法名一致。</li><li>映射文件中 parameterType 必须与 mapper 接口中的方法参数类型一致。</li><li>映射文件中 resultType 必须与 mapper 接口中的返回值类型一致。（实际上，代理对象就是根据返回值类型来判断是使用selectOne方法还是selectList方法）</li></ol><p>例如：</p><ul><li><p>定义与SQL映射文件同名的Mapper接口，并且将Mapper接口和SQL映射文件放置在同一目录下。如下图：<br><a href="https://s2.loli.net/2022/08/11/EXywd1UJNAqWCkb.png"><img src="https://s2.loli.net/2022/08/11/EXywd1UJNAqWCkb.png" alt="image-20210726215946951.png"></a></p></li><li><p>设置SQL映射文件的namespace属性为Mapper接口全限定名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.blog.mapper.UserMapper&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 Mapper 接口中定义方法，方法名就是SQL映射文件中sql语句的id，并保持参数类型和返回值类型一致</p><ul><li><p>对应的Java中的方法名应为selectAll，且返回值类型应为User</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.blog.pojo.User&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.blog.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="案例代码的实现"><a href="#案例代码的实现" class="headerlink" title="案例代码的实现"></a>案例代码的实现</h3><p>在 <code>com.blog.mapper</code> 包下创建 UserMapper接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.blog.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>resources</code> 下创建 <code>com/blog/mapper</code> 目录，并将原来 UserMapper.xml 映射配置文件粘贴进去，此时应该将MyBatis核心配置文件的SQL映射文件的路径更新</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.blog.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.blog.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:13306/mybatis?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PASSWORD.&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/blog/mapper/UserMapper.xml&quot;</span>/&gt;</span> <span class="comment">&lt;!--注意应该它我更新为新路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改我们的<code>MybatisDemo</code>测试类的第3步，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.blog.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.blog.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 加载MyBatis核心配置文件，获取SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="comment">//2. 调用SqlSessionFactory的openSession()，获取SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//3. 获取UserMapper的代理对象</span></span><br><span class="line">            <span class="comment">//3.1 通过SqlSession的getMapper方法获取Mapper接口的代理对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            <span class="comment">//3.2 调用对应方法完成sql的执行</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectAll();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">        <span class="comment">//4. 资源关闭</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细节:如果Mapper接口名称和SQL映射文件名称相同，并在同一目录下，则可以使用包扫描的方式简化SQL映射文件的加载</p><p>如果遵循Mapper代理的方式 —&gt; Mapper接口名与SQL映射文件名就相同 —&gt; 可以使用包扫描。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果要在这里写好多映射文件，一个一个手写，也太麻烦了，如果你遵循了Mapper代理方式，就可以用包扫描的方式来简化操作--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource=&quot;com/blog/mapper/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.blog.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Mybatis配置的优化"><a href="#Mybatis配置的优化" class="headerlink" title="Mybatis配置的优化"></a>Mybatis配置的优化</h1><p>Mybatis的配置文件包含了会深深影响Mybatis行为的设置和属性信息。配置文档的顶层结构如下：</p><ul><li>configuration（配置）<ul><li>properties（属性）</li><li>settings（设置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境配置）<ul><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li>databaseIdProvider（数据库厂商标识）</li><li>mappers（映射器）</li></ul></li></ul><p>配置各个标签的时候，必须遵守前后顺序</p><h2 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h2><p>在核心配置文件的 <code>environments</code> 标签中其实是可以配置多个 <code>environment</code> ，使用 <code>id</code> 给每段环境起名，在 <code>environments</code> 中使用 <code>default=&#39;环境id&#39;</code> 来指定使用哪儿段配置。我们一般就配置一个 <code>environment</code> 即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span>    <span class="comment">&lt;!--切换不同的id可以使用不同的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span>         <span class="comment">&lt;!--例如开发和测试使用的不是同一个数据库，或者想测试不同版本的数据库，可以新建一个环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="批量定义类型别名"><a href="#批量定义类型别名" class="headerlink" title="批量定义类型别名"></a>批量定义类型别名</h2><p>在映射配置文件中的 <code>resultType</code> 属性需要配置数据封装的类型（类的全限定名）。而每次这样写是特别麻烦的，Mybatis 提供了 <code>类型别名</code>(typeAliases) 可以简化这部分的书写。配置别名有两种方式，我们学习最常用的一种就好了。</p><p>首先需要现在核心配置文件中配置类型别名，也就意味着给pojo包下所有的类起了别名（别名就是类名），不区分大小写。内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--name属性的值是实体类所在包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.blog.pojo&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过上述的配置，我们就可以简化映射配置文件中 <code>resultType</code> 属性值的编写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.blog.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数据库配置优化"><a href="#数据库配置优化" class="headerlink" title="数据库配置优化"></a>数据库配置优化</h2><blockquote><p>将数据库的配置分离出去，有利于分类管理</p></blockquote><ol><li><p>创建db.properties数据库配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/emp?characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure></li><li><p>在MyBatis配置文件中使用db.properties数据库配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载数据库配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义类别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.neusoft.po&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源相关属性和事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.neusoft.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="输入映射和输出映射"><a href="#输入映射和输出映射" class="headerlink" title="输入映射和输出映射"></a>输入映射和输出映射</h1><h2 id="输入映射总结"><a href="#输入映射总结" class="headerlink" title="输入映射总结"></a>输入映射总结</h2><p>当sql语句需要一个参数时：</p><ol><li>接口方法参数为一个基本数据类型；parameterType配置一个基本数据类型；</li></ol><p>当sql语句需要多个参数时：</p><ol><li>接口方法参数为一个实体对象类型；parameterType配置一个实体对象类型；</li><li>接口方法参数为一个集合类型（List、Map）；parameterType配置集合中元素的类型；</li></ol><p>注意：当sql语句中需要判断一个基本数据类型的值是否为空时：</p><ol><li>值的类型必须为包装类。</li><li>即使是只传一个基本数据类型，也要使用实体对象传值。 因为：如果在parameterType中设置Integer类型，那么Mybatis会自动寻找get方法来获取对象属性值。因此会出现没有get方法异常。</li></ol><h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="#{} 和 ${} 的区别"></a>#{} 和 ${} 的区别</h3><ul><li>#{}是预编译处理，mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；</li><li>${}是字符串替换，在处理是字符串替换，mybatis在处理 { } 时，就是把 ${ } 替换成变量的值。</li><li>使用 #{} 可以有效的防止SQL注入，提高系统安全性。</li></ul><h2 id="输出映射总结"><a href="#输出映射总结" class="headerlink" title="输出映射总结"></a>输出映射总结</h2><p>分两种使用场景：</p><ul><li>sql语句中的字段名和实体类的属性名一致时，我们则使用resultType</li><li>sql语句中的字段名和实体类的属性名不一致时，我们使用resultMap</li></ul><p>resultType是sql映射文件中定义返回值类型，返回值有基本类型，对象类型，List类型，Map类型等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">总结：</span><br><span class="line">resultType:</span><br><span class="line">1、基本类型 ：resultType = 基本类型</span><br><span class="line">2、List类型： resultType = List中元素的类型</span><br><span class="line">3、Map类型 单条记录：resultType = map</span><br><span class="line">多条记录：resultType = Map中value的类型</span><br></pre></td></tr></table></figure><h3 id="resultMap的使用"><a href="#resultMap的使用" class="headerlink" title="resultMap的使用"></a>resultMap的使用</h3><p>当sql语句中的字段名与实体对象中的字段名不一致时，可以使用resultMap来显式的进行映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义一个resultMap，取一个唯一标识id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;empno&quot;</span> <span class="attr">column</span>=<span class="string">&quot;empno_0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ename_0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;job&quot;</span> <span class="attr">column</span>=<span class="string">&quot;job_0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;hiredate&quot;</span> <span class="attr">column</span>=<span class="string">&quot;hiredate_0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sal&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sal_0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptno&quot;</span> <span class="attr">column</span>=<span class="string">&quot;deptno_0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用resultMap属性，指明使用哪一个resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listEmpAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">    select empno empno_0,</span><br><span class="line">           ename ename_0,</span><br><span class="line">           job job_0,</span><br><span class="line">           hiredate hiredate_0,</span><br><span class="line">           sal sal_0,</span><br><span class="line">           deptno deptno_0</span><br><span class="line">    from emp </span><br><span class="line">    order by empno_0</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>resultMap标签中的 id 属性：是此resultMap的唯一标识。</li><li>resultMap标签中的 type 属性：是此resultMap 映射的实体对象。</li><li>resultMap标签中的子标签id，用来配置主键的映射；子标签 result 用来配置其它字段的映射。</li><li>子标签id 和子标签 result 中的 property 属性，对应实体类中的属性，column 属性对应sql语句中的字段。</li></ol></blockquote><h1 id="常用的数据库操作"><a href="#常用的数据库操作" class="headerlink" title="常用的数据库操作"></a>常用的数据库操作</h1><p>增删改需要提交事务！</p><ul><li>手动提交</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.commit();</span><br></pre></td></tr></table></figure><ul><li>自动提交</li></ul><p><img src="https://pic1.zhimg.com/80/v2-16650aebd5faa09a9ac2298467a979b8_1440w.webp" alt="img"></p><h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><ul><li>id : 就是对应的namespace中的方法名；</li><li>resultType：Sql语句执行的返回值！</li><li>parameterType ： 参数类型！</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;listEmp&quot;</span> parameterType=<span class="string">&quot;Emp&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * </span><br><span class="line">    from emp </span><br><span class="line">    where job like <span class="title function_">concat</span><span class="params">(<span class="string">&#x27;%&#x27;</span>,#&#123;job&#125;,<span class="string">&#x27;%&#x27;</span>)</span> and deptno=#&#123;deptno&#125; </span><br><span class="line">    order by empno</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：只有返回一行一列，resultType才能使用基本数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;listEmpCount&quot;</span> resultType=<span class="string">&quot;int&quot;</span>&gt;</span><br><span class="line">    select <span class="title function_">count</span><span class="params">(*)</span> from emp</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="转义字符查询"><a href="#转义字符查询" class="headerlink" title="转义字符查询"></a>转义字符查询</h3><p>由于 &lt;（小于号）是标签关键词，因此不能识别小于号。所以MyBatis中设计了一些转义字符，来代替一些特殊字符：</p><p><img src="/2022/12/09/Mybatis/p01_01-1670771119782.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;listEmpBySal&quot;</span> parameterType=<span class="string">&quot;double&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * from emp where sal &amp;lt; #&#123;sal&#125; order by empno</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h2><h3 id="不获取主键"><a href="#不获取主键" class="headerlink" title="不获取主键"></a>不获取主键</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--对象中的属性，可以直接用--&gt;</span><br><span class="line">&lt;insert id=<span class="string">&quot;insertEmp1&quot;</span> parameterType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    insert into <span class="title function_">emp</span><span class="params">(ename,job,hiredate,deptno)</span></span><br><span class="line">    values(#&#123;ename&#125;,#&#123;job&#125;,#&#123;hiredate&#125;,#&#123;deptno&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：增删改都会返回int值，表示影响的行数。但是，insert 标签中没有 resultType 属性，insert标签中不能书写resultType属性，只有查询操作才需要对返回结果类型进行相应的指定。</p></blockquote><h3 id="获取主键（有两种）"><a href="#获取主键（有两种）" class="headerlink" title="获取主键（有两种）"></a>获取主键（有两种）</h3><p>第一种：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmp2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;empno&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">        select LAST_INSERT_ID()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into emp(ename,job,hiredate,deptno)</span><br><span class="line">    values(#&#123;ename&#125;,#&#123;job&#125;,#&#123;hiredate&#125;,#&#123;deptno&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(emp.getEmpno());      <span class="comment">//获取返回的主键</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>selectKey标签中的 select LAST_INSERT_ID() 语句就能获取生成的主键</li><li>selectKey标签中的keyProperty属性就是主键名，MyBatis会自动将获取的主键封装给此属性。</li><li>order的值有两种：BEFORE、AFTER<br>BEFORE：先获取主键，然后执行insert； 比如 Oracle数据库。<br>AFTER：先执行insert，然后获取主键； 比如 MySql数据库。</li></ol></blockquote><p>第二种：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmp3&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Emp&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;empno&quot;</span>&gt;</span></span><br><span class="line">    insert into emp(ename,job,hiredate,deptno)</span><br><span class="line">    values(#&#123;ename&#125;,#&#123;job&#125;,#&#123;hiredate&#125;,#&#123;deptno&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>useGeneratedKeys设置为true后，mybatis会使用JDBC的getGeneratedkeys方法获取由数据库内部自动生成的主键，并将该值赋值给由keyProperty指定的属性； 注意：此种方式只适合于有自增长列的数据库（mysql、sqlserver等）</p></blockquote><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmp&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    update emp set job=#&#123;job&#125;,sal=#&#123;sal&#125; where empno=#&#123;empno&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteEmp&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from emp where empno=#&#123;empno&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用注解实现MyBatis映射"><a href="#使用注解实现MyBatis映射" class="headerlink" title="使用注解实现MyBatis映射"></a>使用注解实现MyBatis映射</h2><p>MyBatis也支持使用注解来配置映射语句。 主要有四种注解来实现增删改查：@Select、@Insert、@Update、@Delete</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neusoft.mapper;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> com.neusoft.po.Emp;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from emp where empno = #&#123;empno&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Emp <span class="title function_">getEmpById</span><span class="params">(<span class="type">int</span> empno)</span>;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from emp order by empno&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmpAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>在映射文件中使用的所有的CRUD操作，都可以使用注解的形式完成。</li><li>当使用基于注解的映射器接口时，就不再需要映射配置文件了。</li><li>在实际开发中，可以单独使用映射文件，也可以单独使用注解，也可以混合使用。</li></ol></blockquote><h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><p>动态sql主要用于解决做增删改操作时条件不确定情况。也就是说：在实际开发中，经常需要根据用户是否输入了某个值，来确定是否需要这个条件。 MyBatis中用于动态sql的元素主要有：if、where、trim、set、foreach、choose等</p><h2 id="if-where标签"><a href="#if-where标签" class="headerlink" title="if+where标签"></a>if+where标签</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listEmp&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Emp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from emp </span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job!=null and job!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and job like concat(&#x27;%&#x27;,#&#123;job&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;deptno!=null and deptno!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and deptno = #&#123;deptno&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    order by empno</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>if+where会实现以下功能：</p><ol><li>自动添加where语句</li><li>不需要考虑where后是否加and，mybatis会自动处理</li><li>不需要考虑是否加空格，mybatis会自动处理</li><li>没有 else 标签，也没有 else if 标签。</li></ol><p>注意： job!&#x3D;’’ 此处只可以判断是否为空，不能判断是否为某个值。也就是说：job!&#x3D;’经理’ 是不好使的。</p></blockquote><h2 id="choose标签"><a href="#choose标签" class="headerlink" title="choose标签"></a>choose标签</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listEmp&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Emp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from emp </span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;job!=null and job!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and job like concat(&#x27;%&#x27;,#&#123;job&#125;,&#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;deptno!=null and deptno!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and deptno = #&#123;deptno&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span><span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    order by empno</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>choose会实现如下功能：</p><ol><li>多个 when 标签中，只能执行一个。也就是说：当一个 when 条件满足并执行后，其它的 when 将不再执行。</li><li>当所有 when 都不满足条件时，执行 otherwise 标签。</li></ol><p>if 与 choose 的区别：if 相当于java中的if语句； choose相当于java中的switch语句。</p></blockquote><h2 id="trim标签"><a href="#trim标签" class="headerlink" title="trim标签"></a>trim标签</h2><p>trim 一般用于去除 SQL 语句中多余的 AND 关键字、逗号<code>，</code>或者给 SQL 语句前拼接 where、set 等后缀，可用于选择性插入、更新、删除或者条件查询等操作。trim 语法格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;前缀&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;后缀&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;忽略前缀字符&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;忽略后缀字符&quot;</span>&gt;</span></span><br><span class="line">    SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmp1&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    insert into emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;(&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        ename,deptno,</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job!=null and job!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            job,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;hiredate!=null and hiredate!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            hiredate,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;values(&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;ename&#125;,#&#123;deptno&#125;,</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job!=null and job!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            #&#123;job&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;hiredate!=null and hiredate!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            #&#123;hiredate&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h1><p>三种关联关系：一对一、一对多、多对多</p><p><img src="/2022/12/09/Mybatis/v2-25605d00c345fbccba1c329b0a8dbd5d_1440w-1670773718930.webp"></p><p><img src="/2022/12/09/Mybatis/v2-3a609f389f08ba9019727b650d5cccb2_1440w-1670773129670.webp"></p><ul><li>多个学生，对应一个老师</li><li>对于学生这边而言， 关联 .. 多个学生，关联一个老师 【多对一】</li><li>对于老师而言， 集合 ， 一个老师，有很多学生 【一对多】</li></ul><p><strong>两种查询方式</strong>：嵌套查询、连接查询</p><h2 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h2><p>先在one的一方添加关联查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptByIdLazy&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    select * from dept where deptno = #&#123;deptno&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>many的一方添加查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;empno&quot;</span> <span class="attr">column</span>=<span class="string">&quot;empno&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;job&quot;</span> <span class="attr">column</span>=<span class="string">&quot;job&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;hiredate&quot;</span> <span class="attr">column</span>=<span class="string">&quot;hiredate&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sal&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sal&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptno&quot;</span> <span class="attr">column</span>=<span class="string">&quot;deptno&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">select</span>=<span class="string">&quot;com.neusoft.mapper.DeptMapper.getDeptByIdLazy&quot;</span> <span class="attr">column</span>=<span class="string">&quot;deptno&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from emp where empno = #&#123;empno&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><p>先在many的一方添加关联查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByIdLazy&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from emp where deptno = #&#123;deptno&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：此查询可以不在接口中书写响应的方法</p></blockquote><p>one的一方添加查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span> <span class="attr">id</span>=<span class="string">&quot;deptResultMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;deptno&quot;</span> <span class="attr">column</span>=<span class="string">&quot;deptno&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;loc&quot;</span> <span class="attr">column</span>=<span class="string">&quot;loc&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;empList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">select</span>=<span class="string">&quot;com.neusoft.mapper.EmpMapper.getEmpByIdLazy&quot;</span> <span class="attr">column</span>=<span class="string">&quot;deptno&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from dept where deptno = #&#123;deptno&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="关联映射总结"><a href="#关联映射总结" class="headerlink" title="关联映射总结"></a>关联映射总结</h2><p>使用resultMap实现关联映射时：</p><ul><li>使用association标签完成多对一或一对一映射。</li></ul><ol><li><ol><li>association标签：将关联查询信息映射到一个po对象中。</li><li>association标签中的javaType属性：表示该po对象的类型。</li><li>association标签中的select属性：表示应用哪一个关联查询。</li><li>association标签中的column属性：表示应用关联查询的条件。</li></ol></li></ol><ul><li>使用collection标签完成一对多，多对多映射。</li></ul><ol><li><ol><li>collection标签：将关联查询信息映射到一个list集合中。</li><li>collection标签的ofType属性：表示该集合中的元素对象的类型。</li><li>collection标签中的select属性：表示应用哪一个关联查询。</li><li>collection标签中的column属性：表示应用关联查询的条件。</li></ol></li></ol><h2 id="关联查询的延迟加载"><a href="#关联查询的延迟加载" class="headerlink" title="关联查询的延迟加载"></a>关联查询的延迟加载</h2><p>延迟加载：执行查询时，关联查询不会立即加载。只有在使用关联数据时才会加载。 优点：按需加载，提高效率。</p><blockquote><p>注意： 要使用关联查询的延迟加载，就必须要使用单独查询形式。并且，需要先启用MyBatis的延迟加载配置（需要配置两项）：</p><ol><li>lazyLoadingEnabled：延迟加载的全局开关（默认为false）。</li><li>aggressiveLazyLoading：延迟加载整个对象（默认为true； false：对象的每个属性都会延迟加载，即属性按需加载）</li></ol></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果aggressiveLazyLoading为true，那么lazyLoadingEnabled即使为true也无效。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>重新测试上面的关联查询（要测试单独查询形式）： 当不需要使用关联数据时，关联查询将不会执行。</p></blockquote><p><img src="/2022/12/09/Mybatis/p01_06-1670774760677.png"></p><h1 id="缓存（待更新）"><a href="#缓存（待更新）" class="headerlink" title="缓存（待更新）"></a>缓存（待更新）</h1>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring（宏哥版本）</title>
      <link href="/2022/12/04/spring%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/12/04/spring%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="框架的概述"><a href="#框架的概述" class="headerlink" title="框架的概述"></a>框架的概述</h1><h3 id="什么是框架"><a href="#什么是框架" class="headerlink" title="什么是框架"></a>什么是框架</h3><blockquote><p>框架是一种高度抽取重复代码的设计,形成某个领域的行业解决方案,具有高可用性高重用性,框架其实就是一个半成品软件</p><p>框架帮我们完成大部分的通用代码编写,我们只需站在”巨人的肩膀上”编写业务代码即可,大大提高了我们的开发效率</p><p>比如 spring(降低企业级开发的复杂度)  springMVC&#x2F;struts2(封装servlet-web应用)  mybatis&#x2F;hibernate(orm框架 封装JDBC–数据访问)</p></blockquote><h3 id="框架的优点"><a href="#框架的优点" class="headerlink" title="框架的优点"></a>框架的优点</h3><blockquote><ol><li><p>不用再考虑公共问题</p></li><li><p>专心在业务实现上</p></li><li><p>结构统一，易于学习、维护</p></li><li><p>新手也可写出好程序</p></li><li><p>不要重复造轮子（Stop Trying to Reinvent the Wheel），已经成为开发人员的基本原则。</p></li></ol></blockquote><p>​</p><h1 id="二-spring框架的入门"><a href="#二-spring框架的入门" class="headerlink" title="二.spring框架的入门"></a>二.spring框架的入门</h1><h4 id="2-1spring的概述"><a href="#2-1spring的概述" class="headerlink" title="2.1spring的概述"></a>2.1spring的概述</h4><blockquote><p>spring是一个非侵入性的轻量级框架,说spring是轻量级并不是指spring的jar包和其依赖(源码)是少量的,反而spring是一个庞然大物,包罗万象,而是指spring是非侵入性的</p><p> Spring 是一个开源框架，是为了解决企业应用程序开发复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许您选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。 </p></blockquote><p>创始人:Rod Johnson(罗德.约翰逊)</p><p> <img src="/images/p01_01.png" alt="img"> </p><h4 id="2-2spring的发展历程"><a href="#2-2spring的发展历程" class="headerlink" title="2.2spring的发展历程"></a>2.2spring的发展历程</h4><ul><li>2004 年 03 月，1.0 版发布。</li><li>2006 年 10 月，2.0 版发布。</li><li>2007 年 11 月，更名为 SpringSource，同时发布了 Spring 2.5。</li><li>2009 年 12 月，Spring 3.0 发布。</li><li>2013 年 12 月，Pivotal 宣布发布 Spring 框架 4.0。</li><li>2017 年 09 月，Spring 5.0 发布。</li></ul><h4 id="2-3spring的非侵入性"><a href="#2-3spring的非侵入性" class="headerlink" title="2.3spring的非侵入性"></a>2.3spring的非侵入性</h4><p> 非侵入式则不需要业务代码引入框架代码的信息，即无需继承框架提供的类，从编写者的角度来看，察觉不到框架的存在。 </p><p> 那么非侵入式的技术体现，即允许在应用系统中自由选择和组装Spring框架的各个功能模块，并且不强制要求应用系统的类必须继承或实现Spring框架的类和接口来达到使用框架的目的。 </p><h4 id="2-4spring框架的好处"><a href="#2-4spring框架的好处" class="headerlink" title="2.4spring框架的好处"></a>2.4spring框架的好处</h4><blockquote><p>1、非侵入式设计</p><p>Spring是一种非侵入式(non-invasive)框架，它可以使应用程序代码对框架的依赖最小化。</p><p>2、 方便解耦、简化开发</p><p>Spring就是一个大工厂，可以将所有对象的创建和依赖关系的维护工作都交给Spring容器管理，大大地降低了组件之间的耦合性。</p><p>3、支持AOP</p><p>Spring提供了对AOP的支持，它允许将一些通用任务，如安全、事务、日志等进行集中式处理，从而提高了程序的复用性。</p><p>4、支持声明式事务处理</p><p>只需要通过配置就可以完成对事务的管理，而无需手动编程。</p><p>5、方便程序的测试</p><p>Spring提供了对Junit4的支持，可以通过注解方便的测试Spring程序。</p><p>6、方便集成各种优秀框架</p><p>Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架(如：Struts、Hibernate、MyBatis、Quartz等)的直接支持。</p><p>7、降低Java EE API的使用难度</p><p>Spring对Java EE开发中非常难用的一些API(如：JDBC、JavaMail等)，都提供了封装，使这些API应用难度大大降低。</p></blockquote><h4 id="2-5spring的体系结构"><a href="#2-5spring的体系结构" class="headerlink" title="2.5spring的体系结构"></a>2.5spring的体系结构</h4><p>  Spring是一个分层框架，由七个定义良好的模块组成。Spring模块构建在核心容器之上，核心容器定义了创建，配置，管理bean的方式。 <img src="/images/p01_02.png" alt="img"> </p><h5 id="2-5-1-核心容器BeanFactory"><a href="#2-5-1-核心容器BeanFactory" class="headerlink" title="2.5.1 核心容器BeanFactory"></a>2.5.1 核心容器BeanFactory</h5><blockquote><p>核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory ，它是工厂模式的实现。BeanFactory 使用控制反转 (IOC) 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开 ( 工厂方法 ) 。 </p><p>BeanFactory使spring成为一个容器</p></blockquote><p><img src="/images/1650939404866.png" alt="1650939404866"></p><h5 id="2-5-2-ApplicationContext-上下文"><a href="#2-5-2-ApplicationContext-上下文" class="headerlink" title="2.5.2 ApplicationContext 上下文"></a>2.5.2 ApplicationContext 上下文</h5><p> Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。 Spring 上下文包括企业服务，例如JNDI 、 EJB 、电子邮件、国际化、校验和调度功能。 </p><blockquote><p>applicationContxt.xml:spring核心配置文件–&gt;上下文(BeanFactory的外在体现)</p><p>ApplicationContext 使spring成为一个框架</p></blockquote><h5 id="2-5-3spring-AOP"><a href="#2-5-3spring-AOP" class="headerlink" title="2.5.3spring AOP"></a>2.5.3spring AOP</h5><p> 通过配置管理特性， Spring AOP 模块直接将面向方面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持 AOP 。 Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP ，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。 </p><h5 id="2-5-4-Spring-DAO"><a href="#2-5-4-Spring-DAO" class="headerlink" title="2.5.4  Spring DAO"></a>2.5.4  Spring DAO</h5><p> JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。 Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构 </p><h5 id="2-5-5-spring-ORM"><a href="#2-5-5-spring-ORM" class="headerlink" title="2.5.5 spring ORM"></a>2.5.5 spring ORM</h5><p> Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO 、 Hibernate 和 iBatis SQL Map 。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。 </p><h5 id="2-5-6-Spring-Web模块"><a href="#2-5-6-Spring-Web模块" class="headerlink" title="2.5.6 Spring Web模块"></a>2.5.6 <strong>Spring Web模块</strong></h5><p> Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以， Spring 框架支持与 Jakarta Struts 的集成。 Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。 </p><h5 id="2-5-7-Spring-MVC框架"><a href="#2-5-7-Spring-MVC框架" class="headerlink" title="2.5.7 Spring MVC框架"></a>2.5.7 <strong>Spring MVC框架</strong></h5><p> MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口， MVC 框架变成为高度可配置的， MVC 容纳了大量视图技术，其中包括 JSP 、 Velocity 、 Tiles 、 iText 和 POI 。 </p><h4 id="2-6spring的两大核心"><a href="#2-6spring的两大核心" class="headerlink" title="2.6spring的两大核心"></a>2.6spring的两大核心</h4><h5 id="2-6-1DI-x2F-IOC依赖注入-x2F-控制反转"><a href="#2-6-1DI-x2F-IOC依赖注入-x2F-控制反转" class="headerlink" title="2.6.1DI&#x2F;IOC依赖注入&#x2F;控制反转"></a>2.6.1DI&#x2F;IOC依赖注入&#x2F;控制反转</h5><blockquote><p>依赖注入:将依赖对象的创建和赋值(装配)由程序内部交给了外部容器,并将创建的依赖对象注入程序内部,达到完全解耦的目的</p><p>是指工程中需要的组件无须自己创建，而是依赖于外部环境注入。</p><p>好莱坞原则:你不要问我,我会自己给你</p></blockquote><p><img src="/images/1650942282502.png" alt="1650942282502"></p><h5 id="2-6-2-AOP面向切面编程"><a href="#2-6-2-AOP面向切面编程" class="headerlink" title="2.6.2 AOP面向切面编程"></a>2.6.2 AOP面向切面编程</h5><blockquote><p>springAOP是spring DI的补充</p><p>概述:简单的说它就是把我们程序重复的代码抽取出来，在需要执行的时候，使用动态代理的技术，在不修改源码的基础上，对我们的已有方法进行增强,比如 日志管理,事务管理,权限管理等</p><p>原理:代理模式</p></blockquote><p><img src="/images/1650943462398.png" alt="1650943462398"></p><h4 id="2-7spring官网和相关资料下载"><a href="#2-7spring官网和相关资料下载" class="headerlink" title="2.7spring官网和相关资料下载"></a>2.7spring官网和相关资料下载</h4><p>官网网址:<a href="https://spring.io/projects/spring-framework">https://spring.io/projects/spring-framework</a></p><p>spring以前版本的下载和相关资料下载:<a href="https://repo.spring.io/ui/native/libs-release-local/org/springframework/spring/">https://repo.spring.io/ui/native/libs-release-local/org/springframework/spring/</a></p><h1 id="三-spring框架的搭建"><a href="#三-spring框架的搭建" class="headerlink" title="三.spring框架的搭建"></a>三.spring框架的搭建</h1><h4 id="3-1基础环境搭建的步骤"><a href="#3-1基础环境搭建的步骤" class="headerlink" title="3.1基础环境搭建的步骤"></a>3.1基础环境搭建的步骤</h4><h5 id="3-1-1基础环境"><a href="#3-1-1基础环境" class="headerlink" title="3.1.1基础环境"></a>3.1.1基础环境</h5><ul><li><p>1创建SE项目–&gt;maven</p></li><li><p>2导入spring基础依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- spring 版本号 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入spring基础依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 此依赖会关联引用Spring中的所有基础jar包 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>3在resources目录下新建一个spring核心配置文件 applicationContxt.xml</p><ul><li><p>xml的基本语法:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Student</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">password</span>&gt;</span>123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注意:在配置框架的xml文件时一般需要通过schema约定标签的命名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring的核心配置文件,是BeanFactory的外在体现,可以在配置文件中配置你想管理进spring容器的bean--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      bean标签:配置bean的(由spring装配的对象)</span></span><br><span class="line"><span class="comment">       class:对象的类(全类名/全限定名)</span></span><br><span class="line"><span class="comment">       id:bean在容器中的唯一标识不能重复,当程序中想获取bean时是可以通过id获取的</span></span><br><span class="line"><span class="comment">       UserDaoImpl userDao=new UserDaoImpl();</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>4在xml中管理bean,并测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ①获取spring容器,加载applicationContext.xml文件并解析</span></span><br><span class="line">BeanFactory factory= <span class="keyword">new</span>   <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">//②通过getBean方法获取容器中的对象</span></span><br><span class="line">IUserDao userDao=(UserDaoImpl)factory.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">userDao.queryUser();</span><br></pre></td></tr></table></figure></li></ul><h5 id="3-1-2有无spring的区别–依赖注入"><a href="#3-1-2有无spring的区别–依赖注入" class="headerlink" title="3.1.2有无spring的区别–依赖注入"></a>3.1.2有无spring的区别–依赖注入</h5><p><strong>dao:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoImpl</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl()--&gt;无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryUser</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------queryUser()----------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(IUserDao userDao)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl(IUserDao userDao)--有参构造方法&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.userDao=userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(IUserDao userDao)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setUserDao(IUserDao userDao)&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.userDao=userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl()--无参构造方法&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.queryUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>applicationContext.xml:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--UserDaoImpl userDao=new UserDaoImpl();--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--IUserService userService=new UserServiceImpl(userDao);--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--userService.findUser();--&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--使用无参构造方法初始化bean--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--使用有参的构造方法初始化bean</span></span><br><span class="line"><span class="comment">     构造方法注入</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;bean id=&quot;userService&quot; class=&quot;com.wudagai.springtest.service.UserServiceImpl&quot;&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;constructor-arg ref=&quot;userDao&quot;&gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--set方法注入</span></span><br><span class="line"><span class="comment">        UserServiceImpl userService=new UserServiceImpl();</span></span><br><span class="line"><span class="comment">       userService.setUserDao(userDao);</span></span><br><span class="line"><span class="comment">       userService.findUser();</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>test:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestYesSpring</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    BeanFactory factory= <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    IUserService userService=(UserServiceImpl)factory.getBean(<span class="string">&quot;userService1&quot;</span>);</span><br><span class="line">    userService.findUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-spring中bean的基本原理"><a href="#四-spring中bean的基本原理" class="headerlink" title="四.spring中bean的基本原理"></a>四.spring中bean的基本原理</h1><h3 id="4-1spring实例化bean的过程-反射是框架的灵魂"><a href="#4-1spring实例化bean的过程-反射是框架的灵魂" class="headerlink" title="4.1spring实例化bean的过程(反射是框架的灵魂)"></a>4.1spring实例化bean的过程(反射是框架的灵魂)</h3><p><img src="/images/1650959820267.png" alt="1650959820267"></p><h3 id="4-2获取spring容器的三种方式"><a href="#4-2获取spring容器的三种方式" class="headerlink" title="4.2获取spring容器的三种方式"></a>4.2获取spring容器的三种方式</h3><blockquote><p>–ClassPathXmlApplicationContext:通过获取类路径下的xml加载spring容器</p><p>–FileSystemXmlApplicationContext:通过文件系统路径下的xml加载spring容器</p><p>–XmlWebApplicationContext:web环境下加载spring容器</p></blockquote><p>①在pom.xml中做以下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--servlet-api相关--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--spring核心依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--springweb相关--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②在web.xml中做以下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--tonmat启动时会加载并解析web.xml文件(是一个可以被事件监听的行为)--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--监听器Listener:</span></span><br><span class="line"><span class="comment">       事件:可以被监听的行为 比如:点击,鼠标移入移除,tomcat启动</span></span><br><span class="line"><span class="comment">       事件源:发生事件的地方 比如:按钮,tomcat</span></span><br><span class="line"><span class="comment">       监听器:发生的行为 比如 弹出模态框 加载web.xml</span></span><br><span class="line"><span class="comment">         注册监听:将事件 事件源和监听器绑定在一起就是注册监听</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册监听:ContextLoaderListener tomcat启动时就执行该监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③在servlet中测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">   BeanFactory factory= WebApplicationContextUtils.getRequiredWebApplicationContext(request.getServletContext());</span><br><span class="line">    IUserService userService=(UserServiceImpl)factory.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">    userService.findUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3spring容器的两种类型"><a href="#4-3spring容器的两种类型" class="headerlink" title="4.3spring容器的两种类型"></a>4.3spring容器的两种类型</h3><h4 id="4-3-1ApplicationContext"><a href="#4-3-1ApplicationContext" class="headerlink" title="4.3.1ApplicationContext"></a>4.3.1ApplicationContext</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *ApplicationContext:</span></span><br><span class="line"><span class="comment">         *ApplicationContext在自身被实例化时一次完成所有Bean的创建。大多数时候使用</span></span><br><span class="line"><span class="comment">         * 解释:</span></span><br><span class="line"><span class="comment">         *     积极加载:在加载spring核心配置文件时(创建spring容器)就将所有的bean完成了创建工作</span></span><br><span class="line"><span class="comment">         *     优点:</span></span><br><span class="line"><span class="comment">         *         可以在加载xml文件的时候完成对xml正确性的校验</span></span><br><span class="line"><span class="comment">         *     缺点:</span></span><br><span class="line"><span class="comment">         *         占内存大,解析时间长</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 如果你不是对内存斤斤计较的话就使用ApplicationContext</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">ApplicationContext factory=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="4-3-2-BeanFactory"><a href="#4-3-2-BeanFactory" class="headerlink" title="4.3.2 BeanFactory"></a>4.3.2 BeanFactory</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * BeanFactory:</span></span><br><span class="line"><span class="comment">         *     懒加载:在加载spring核心配置文件的时候不会马上完成bean实例的创建而是在getBean()方法被  调用时创建实例</span></span><br><span class="line"><span class="comment">         *     优点:</span></span><br><span class="line"><span class="comment">         *        占内存小,解析时间短</span></span><br><span class="line"><span class="comment">         *     缺点:</span></span><br><span class="line"><span class="comment">         *        不能在加载xml文件时完成对xml正确性的校验</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">BeanFactory factory=<span class="keyword">new</span> <span class="title class_">XmlBeanFactory</span>(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;applicationContext.xml&quot;</span>));</span><br><span class="line">factory.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">factory.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-4spring中bean的生命周期"><a href="#4-4spring中bean的生命周期" class="headerlink" title="4.4spring中bean的生命周期"></a>4.4spring中bean的生命周期</h3><blockquote><p>bean的生命周期现在是由程序内部交个了外部容器</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   bean的生命周期:构造器-&gt;初始化方法(统一的初始化配置)-&gt;提供服务-&gt;销毁方法(释放资源)</span></span><br><span class="line"><span class="comment">   init-method:指定初始化方法</span></span><br><span class="line"><span class="comment">   destroy-method:指定销毁方法,在spring容器正常关闭之前执行</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;bean id=&quot;student&quot; class=&quot;com.wudagai.springtest.entity.Student&quot; init-method=&quot;init&quot; destroy-method=&quot;destory&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/181453414212066.png" alt="img"> </p><p> <img src="/images/181454040628981.png" alt="img"> </p><h3 id="4-5spring实例化bean的三种方式"><a href="#4-5spring实例化bean的三种方式" class="headerlink" title="4.5spring实例化bean的三种方式"></a>4.5spring实例化bean的三种方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--构造方法</span></span><br><span class="line"><span class="comment">       UserDaoImpl userDao=new UserDaoImpl()</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id=&quot;userDao&quot; class=&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--静态工厂方法:工厂中的方法都是静态方法</span></span><br><span class="line"><span class="comment">        UserDaoImpl userDao=DaoFactory.getUserDao()</span></span><br><span class="line"><span class="comment">        class:指定工厂类</span></span><br><span class="line"><span class="comment">        factory-method:工厂方法</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id=&quot;userDao&quot; class=&quot;com.wudagai.springtest.factory.DaoFactory&quot; factory-  method=&quot;getUserDao&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--实例工厂方法:工厂中的方法都是实例方法</span></span><br><span class="line"><span class="comment">      DaoFactoryInstace factory=new DaoFactoryInstace();</span></span><br><span class="line"><span class="comment">      UserDaoImpl userDao=factory.getUserDao();</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;daoFactoryInstace&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.factory.DaoFactoryInstace&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     factory-bean:工厂实例</span></span><br><span class="line"><span class="comment">     class:对象的类</span></span><br><span class="line"><span class="comment">     factory-method:工厂方法</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">factory-bean</span>=<span class="string">&quot;daoFactoryInstace&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-6spring中bean的作用域"><a href="#4-6spring中bean的作用域" class="headerlink" title="4.6spring中bean的作用域"></a>4.6spring中bean的作用域</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     SE环境:</span></span><br><span class="line"><span class="comment">     spring中bean的作用域</span></span><br><span class="line"><span class="comment">     singleton(默认的):单例,每一个bean在spring中只用一个实例,通过getBean()方法获取到指定的bean都是同一个对象</span></span><br><span class="line"><span class="comment">                       在spring容器创建时就创建所有的bean</span></span><br><span class="line"><span class="comment">     prototype:原型,在spring容器创建时不会创建bean,只有通过getBean方法获取实例时才创建bean,每调用一次getBean()方法</span></span><br><span class="line"><span class="comment">                   都会在spring容器中创建新的bean(实例)</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;bean id=&quot;userDao&quot; class=&quot;com.wudagai.springtest.dao.UserDaoImpl&quot; scope=&quot;singleton&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    web环境:</span></span><br><span class="line"><span class="comment">      singleton(默认的):单例,每一个bean在spring中只用一个实例,通过getBean()方法获取到指定的bean都是同一个对象</span></span><br><span class="line"><span class="comment">                       在spring容器创建时就创建所有的bean</span></span><br><span class="line"><span class="comment">      prototype:原型,在spring容器创建时不会创建bean,只有通过getBean方法获取实例时才创建bean,每调用一次getBean()方法</span></span><br><span class="line"><span class="comment">                   都会在spring容器中创建新的bean(实例)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      需要在web.xml中配置requestContextListener,下面三个作用域才能生效</span></span><br><span class="line"><span class="comment">     &lt;listener&gt;</span></span><br><span class="line"><span class="comment">        &lt;listener-class&gt;org.springframework.web.context.request.RequestContextListener&lt;/listener-class&gt;</span></span><br><span class="line"><span class="comment">    &lt;/listener&gt;</span></span><br><span class="line"><span class="comment">      request:同一个请求共享同一个bean实例,不同请求是不同的实例</span></span><br><span class="line"><span class="comment">      session:同一个会话不同请求共享同一个bean实例</span></span><br><span class="line"><span class="comment">      globalsession:同一个会话不同请求共享同一个bean实例</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/1651029504497.png" alt="1651029504497"></p><h3 id="4-7spring中设置懒加载方式"><a href="#4-7spring中设置懒加载方式" class="headerlink" title="4.7spring中设置懒加载方式"></a>4.7spring中设置懒加载方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   default-lazy-init=&quot;true&quot; 全局加载方式 true:懒加载  fasle(默认):积极加载</span></span><br><span class="line"><span class="comment">   lazy-init=&quot;true&quot; 单个bean的加载方式 true:懒加载  fasle:积极加载  默认跟default-lazy-init保持一致</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.BookDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="五-依赖注入"><a href="#五-依赖注入" class="headerlink" title="五.依赖注入"></a>五.依赖注入</h1><h3 id="5-1依赖注入的三种方式"><a href="#5-1依赖注入的三种方式" class="headerlink" title="5.1依赖注入的三种方式"></a>5.1依赖注入的三种方式</h3><p><strong>pojo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="keyword">private</span> Integer stuAge;</span><br><span class="line">    <span class="keyword">private</span> Double grade;</span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String stuName, Integer stuAge)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuName = stuName;</span><br><span class="line">        <span class="built_in">this</span>.stuAge = stuAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String stuName, Integer stuAge, Double grade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuName = stuName;</span><br><span class="line">        <span class="built_in">this</span>.stuAge = stuAge;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStuName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stuName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStuName</span><span class="params">(String stuName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuName = stuName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getStuAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stuAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStuAge</span><span class="params">(Integer stuAge)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuAge = stuAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getGrade</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGrade</span><span class="params">(Double grade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IUserDao <span class="title function_">getUserDao</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(IUserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;stuName=&#x27;&quot;</span> + stuName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, stuAge=&quot;</span> + stuAge +</span><br><span class="line">                <span class="string">&quot;, grade=&quot;</span> + grade +</span><br><span class="line">                <span class="string">&quot;, userDao=&quot;</span> + userDao +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>applicationContxt.xml</strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖注入的三种方式</span></span><br><span class="line"><span class="comment">    构造方法注入</span></span><br><span class="line"><span class="comment">    属性注入(设值注入)</span></span><br><span class="line"><span class="comment">    接口注入:侵入性强</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ========================================构造方法注入=======================================--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Student student=new Student(&quot;zhangsan&quot;,20,90.0);</span></span><br><span class="line"><span class="comment">     public Student(String stuName, Integer stuAge, Double grade)</span></span><br><span class="line"><span class="comment">   &lt;constructor-arg&gt;构造方法的参数</span></span><br><span class="line"><span class="comment">    必要属性: ref 或 value</span></span><br><span class="line"><span class="comment">      ref:参数的类型是一个pojo</span></span><br><span class="line"><span class="comment">      value:简单的类型  String和包装类型</span></span><br><span class="line"><span class="comment">    非必要属性:</span></span><br><span class="line"><span class="comment">        index:参数的索引,索引从0开始</span></span><br><span class="line"><span class="comment">        name:指定构造方法中的参数名</span></span><br><span class="line"><span class="comment">        type:指定参数转换的类型</span></span><br><span class="line"><span class="comment">    注意:依赖注入简单类型配置的时候都是String类型,</span></span><br><span class="line"><span class="comment">         但是spring中有许多类型转换组件,会将String类型转为参数对应的类型再进行赋值</span></span><br><span class="line"><span class="comment">         所以建议所有的成员变量都用包装类进行声明</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;bean id=&quot;student&quot; class=&quot;com.wudagai.springtest.pojo.Student&quot;&gt;--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;constructor-arg value=&quot;zhangsan&quot;&gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;constructor-arg value=&quot;40&quot;&gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;constructor-arg value=&quot;90.0&quot;&gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--&lt;bean id=&quot;student&quot; class=&quot;com.wudagai.springtest.pojo.Student&quot;&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;constructor-arg index=&quot;1&quot; value=&quot;20&quot; &gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;constructor-arg index=&quot;0&quot; value=&quot;lisi&quot;&gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;constructor-arg index=&quot;2&quot; value=&quot;80.0&quot; &gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.pojo.Student&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;stuAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.Integer&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;lisi&quot;</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;grade&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;81.0&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- ========================================set方法注入 =======================================--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;property &gt;:设置属性</span></span><br><span class="line"><span class="comment">        必要属性: ref 或 value  name</span></span><br><span class="line"><span class="comment">         ref:参数的类型是一个pojo</span></span><br><span class="line"><span class="comment">         value:简单的类型  String和包装类型</span></span><br><span class="line"><span class="comment">         name:属性名-&gt;set/get方法去掉get/set剩下的英文单词首字母小写 比如setUserDao-&gt;userDao    setUserName-&gt;userName</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wangwu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2依赖注入的类型"><a href="#5-2依赖注入的类型" class="headerlink" title="5.2依赖注入的类型"></a>5.2依赖注入的类型</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu8&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--简单类型--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--pojo类型--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;property name=&quot;minStudent&quot; ref=&quot;min&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minStudent&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.pojo.MinStudent&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--list集合--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stringList&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>lisi<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minStudentList&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;min&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.pojo.MinStudent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--set集合--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--private Set&lt;String&gt; stringSet;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stringSet&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>lisi<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--private Set&lt;MinStudent&gt; minStudentSet;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minStudentSet&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;min&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.pojo.MinStudent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--map集合--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--private Map&lt;Integer,String&gt; integerStringMap;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;integerStringMap&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lisi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--private Map&lt;Integer,MinStudent&gt; integerMinStudentMap;--&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--&lt;entry key=&quot;3&quot;&gt;--&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--&lt;bean class=&quot;xxxxx&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--&lt;/entry&gt;--&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--properties类型--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--private Properties properties;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>jdbc://mysql:localhost:3306:test<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>com.mysql.jdbc.Driver&gt;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-3spring注解配置"><a href="#5-3spring注解配置" class="headerlink" title="5.3spring注解配置"></a>5.3spring注解配置</h3><ul><li><p><strong>spring的配置方式一共有三种</strong></p><blockquote><p>第一种(spring1.x版本):xml配置方式</p><p>场景:任何bean都可以使用xml配置,简单来说就是自定义业务场景的bean和基础配置还有第三方依赖的bean都可以通过xml配置后交由spring管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--将UserDao管理进spring容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--将UserService进spring容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种(spring2.x版本):注解方式</p><p>  疑问:是用xml配置还是用注解配置?</p><p>  场景: </p><p>​            自定义业务场景的bean和基础配置是用注解方式</p><p>​           第三方依赖的bean是用xml配置</p><p>第三种方式(spring3.x版本):javaConfig方式(java配置方式)</p><p>后面再学习</p></blockquote></li><li><p><strong>spring注解配置</strong></p><ul><li>依赖于AOP,导入aop的依赖</li></ul><blockquote><p>①需要在applicationContext.xml中开启注解装配</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--=========================注解方式配置依赖注入=======================--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解装配--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将UserDao管理进spring容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将UserService进spring容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wudagai.springtest.service.UserServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②然后在需要注入的字段上使用注解@Resource(name&#x3D;”userDao”)或者@Autowired</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="comment">//@Autowired    </span></span><br><span class="line">    <span class="meta">@Resource(name=&quot;userDao&quot;)</span>    </span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>@Autowired</strong>   </p><blockquote><p>按照类型找：根据字段类型匹配spring容器中bean的类型，如果匹配上了，spring自动将bean注入字段中</p><p>注意：</p><p>​①如果通过字段的类型找到多个bean，就会按照字段名配置bean的id,如果匹配上了，spring自动将bean注入字段中,所以一般一个接口对应一个实现类即可</p><p>​    ②如果找不到bean就会报错，required &#x3D; false属性配置该字段是否必须注入，false:不必须，true:必须，默认为false</p><p>​     ③可以通过@Qualifier(name)与bean的id匹配直接匹配</p></blockquote></li><li><p><strong>@Resource</strong></p><blockquote><p>@Resource：作用跟@Autowired一样</p><p>@Resource(name&#x3D;”xx”)  作用跟@Qualifier(name)+@Autowired作用是一样的，根据name匹配bean的id</p></blockquote></li></ul><h3 id="5-4开启组件扫描"><a href="#5-4开启组件扫描" class="headerlink" title="5.4开启组件扫描"></a>5.4开启组件扫描</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    base-package:指定扫描的路径（包名），多个包中间用“，”分隔</span></span><br><span class="line"><span class="comment">    作用:将指定包中所有被@Component注解修饰的组件管理进spring容器,bean的id默认为类名首字母小写</span></span><br><span class="line"><span class="comment">        @Component(value)中的value可以指定bean的id值</span></span><br><span class="line"><span class="comment">    @Component下有三个子注解,用于开发时语义上的模块拆分</span></span><br><span class="line"><span class="comment">        @Service :service层 业务逻辑</span></span><br><span class="line"><span class="comment">        @Repository:dao层  数据访问层</span></span><br><span class="line"><span class="comment">        @Controller:controller 控制层</span></span><br><span class="line"><span class="comment">        如果某个组件没有层次的归属可以使用@Component注解</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wudagai.springtest.*&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="六-springAOP"><a href="#六-springAOP" class="headerlink" title="六.springAOP"></a>六.springAOP</h1><h3 id="6-1代理模式"><a href="#6-1代理模式" class="headerlink" title="6.1代理模式"></a>6.1代理模式</h3><blockquote><p>代理(Proxy)是一种设计模式,提供了对目标对象另外的访问方式;即通过代理对象访问目标对象.这样做的好处是:<strong>可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能</strong><br> 这里使用到编程中的一个思想:不要随意去修改别人已经写好的代码或者方法,如果需改修改,可以通过代理的方式来扩展该方法，Spring中AOP切面编程就是代理的一个典型例子</p><p>总结：在不改目标对象代码的情况下对其进行增强</p><p> 代理模式的关键点是:<strong>代理对象与目标对象，代理对象是对目标对象的扩展，并会调用目标对象</strong> </p></blockquote><p><img src="/images/1651126169259.png" alt="1651126169259"></p><h4 id="6-1-1代理模式的分类"><a href="#6-1-1代理模式的分类" class="headerlink" title="6.1.1代理模式的分类"></a>6.1.1代理模式的分类</h4><ul><li>静态代理（代理对象在源代码中出现，需要开发人员提供代理对象）<ul><li>代理对象和目标对象的关系<ul><li>父子关系：目标对象是代理对象的父类</li><li>兄弟关系：目标对象和代理对象实现同一个接口（面向接口编程）</li></ul></li></ul></li><li>动态代理（代理对象在程序运行过程中自动创建，不需要开发人员提供，但是需要配置代理模式–反射机制）<ul><li>代理对象和目标对象的关系<ul><li>父子关系：目标对象是代理对象的父类（cglib动态代理）</li><li>兄弟关系：目标对象和代理对象实现同一个接口（面向接口编程）（jdk动态代理）</li></ul></li></ul></li><li>JDK动态代理核心代码:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wudagai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022/4/28 15:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:中间类</span></span><br><span class="line"><span class="comment"> * 由中间类生成代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中间类持有目标类对象的引用,这里会构成一种静态代理关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object object; <span class="comment">//目标对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj;<span class="comment">//增强对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增强对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JavaProxyInvocationHandler</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.obj=obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态生成代理类对象,Proxy.newProxyInstance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回代理类的实例</span></span><br><span class="line"><span class="comment">     * object:指定为哪一个目标对象生成代理对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">newProxyInstance</span><span class="params">(Object object)</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.object=object;</span><br><span class="line">       <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">               <span class="comment">//指定代理对象的类加载器(获取目标对象的类加载器,代理对象由目标对象的类加载器进行加载)</span></span><br><span class="line">               <span class="built_in">this</span>.object.getClass().getClassLoader(),</span><br><span class="line">               <span class="comment">//代理对象需要实现的接口，可以同时指定多个接口(目标对象的接口)</span></span><br><span class="line">               <span class="built_in">this</span>.object.getClass().getInterfaces(),</span><br><span class="line">               <span class="comment">//方法调用的实际处理者，代理对象的方法调用都会转发到这里 保证invoke方法会被执行(代理对象每一次执行方法都会调用this.invoke())</span></span><br><span class="line">               <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 代理对象执行的方法(对象)--封装了方法的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 方法的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 目标对象执行方法返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        TranManager tranManager=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> TranManager)&#123;</span><br><span class="line">            tranManager=(TranManager)obj;</span><br><span class="line">        &#125;</span><br><span class="line">        tranManager.open();</span><br><span class="line">        Object result=method.invoke(object,args);<span class="comment">//告诉目标对象执行核心业务方法</span></span><br><span class="line">        tranManager.close();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-2AOP：全称是-Aspect-Oriented-Programming-即：面向切面编程。"><a href="#6-2AOP：全称是-Aspect-Oriented-Programming-即：面向切面编程。" class="headerlink" title="6.2AOP：全称是 Aspect Oriented Programming 即：面向切面编程。"></a>6.2AOP：全称是 Aspect Oriented Programming 即：面向切面编程。</h3><p>简单的说它就是把我们程序重复的代码抽取出来，在需要执行的时候，使用动态代理的技术，在不修改源码的基础上，对我们的已有方法进行增强。</p><p>即当需要扩展功能时，传统方式采用纵向继承方式实现。但这种方式有很多缺点。 比如：父类方法名称改变时，子类也要修改。给多个方法扩展功能时，子类也需要修改。 因此，spring的AOP，实际上是采用横向抽取机制，取代传统的纵向继承体系。</p><p>实现AOP示意图：</p><ol><li>先将方面代码抽取出来<br><img src="/images/p01_04.png" alt="img"></li><li>运行时将业务代码和方面代码编织在一起<br><img src="/images/p01_05.png" alt="img"></li></ol><p>Spring AOP 可以使用xml文件形式实现，也可以使用注解方式实现。下面只使用注解方式实现Spring AOP。</p><p>动态代理是一种常用的设计模式，广泛应用于框架中，Spring框架的AOP特性就是应用动态代理实现的。</p><p><img src="/images/p01_06.png" alt="img"></p><p>实现动态代理有两种形式：</p><ol><li>jdk动态代理：根据目标类接口获取代理类实现规则，生成代理对象。这个代理对象，也是目标类接口的一个实现类。</li><li>cglib动态代理：根据目标类本身获取代理类实现规则，生成代理对象。这个代理对象，也是目标类的一个子类。 （如果目标类为final，则不能使用CGLib实现动态代理）</li></ol><p>SpringAOP可以自动在jdk动态代理和CGLib动态代理之间进行切换，规则如下：</p><ol><li>如果目标对象实现了接口，采用jdk动态代理实现aop。</li><li>如果目标对象没有实现接口，采用CGLib动态代理实现aop。</li><li>如果目标对象实现了接口，但仍然想要使用CGLIB实现aop，可以手动进行配置。</li></ol>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
